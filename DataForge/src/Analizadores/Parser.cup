// ------------  Paquete e importaciones ------------
package Analizadores;

import java_cup.runtime.*;
import java.util.ArrayList;
import Reportes.ReporteErrores;
import Reportes.ErrorObj;
import java.util.HashMap;
import java.util.Map;


//------> Codigo para el parser
//------> Declaracion de variables, funciones y funciones de error

parser code 
{:
    private String tituloGlobal;
    private ArrayList<String> ejexGlobal;
    private ArrayList<String> ejeyGlobal;
    private String titxGlobal;
    private String tityGlobal;
    private ArrayList<String> labGlobal;
    private ArrayList<String> valsGlobal;
    private ArrayList<String> ejexGlobalL;
    private ArrayList<String> ejeyGlobalL;
    private String titxGlobalL;
    private String tityGlobalL;
    private ArrayList<String> valsGlobalH;
    public static String resultado = ""; 

    public void syntax_error(Symbol s)
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
            ReporteErrores.TablaErroresSintácticos.add(new ErrorObj("Sintáctico", "El caracter: '" + s.value.toString() + "' no cumple las reglas del lenguaje.", Integer.toString(s.right), Integer.toString(s.left))); 
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
    }

:}


//------> Codigo para las acciones gramaticales (no tocar)
action code
{:  :}


//------> Declaración de terminales
/*-----PALABRAS RESERVADAS-----*/
terminal String INICIO_CODIGO;
terminal String FIN_CODIGO;
terminal String FIN_DECLARACION;
terminal String VAR;
terminal String DOUBLE;
terminal String CHAR;
terminal String ARRAY;
terminal String SUMA;
terminal String RESTA;
terminal String MULTIPLICACION;
terminal String DIVISION;
terminal String MODULO;
terminal String CONSOLE;
terminal String IMPRIMIR;
terminal String MEDIA;
terminal String MEDIANA;
terminal String MODA;
terminal String VARIANZA;
terminal String MAX;
terminal String MIN;
terminal String COLUMN;
terminal String EJECUTAR;
terminal String GBARRAS;
terminal String GPIE;
terminal String GLINEAS;
terminal String HISTOGRAMA;
terminal String GTITULO;
terminal String X;
terminal String Y;
terminal String tX;
terminal String tY;
terminal String LABEL;
terminal String VALUES;

/*-----PRÍNCIPAL-----*/
terminal String ENTERO;
terminal String DECIMAL;
terminal String LETRA;
terminal String ID_VAR;
terminal String ID_ARRAY;
terminal String CADENA;

/*-----CONCATENADORES-----*/
terminal String CORCHETE_APERTURA;
terminal String CORCHETE_CIERRE;
terminal String PARENTESIS_APERTURA;
terminal String PARENTESIS_CIERRE;

/*-----SÍMBOLOS-----*/
terminal String DOS_PUNTOS;
terminal String PUNTO_COMA;
terminal String MENORQUE;
terminal String MAYORQUE;
terminal String GUION;
terminal String COMA;
terminal String IGUAL;

//------> Declaración de no terminales
non terminal inicio;
non terminal lista_instrucciones;
non terminal instruccion;
non terminal variable;
non terminal array;
non terminal tipo;
non terminal expresion;
non terminal lista_expresiones;
non terminal operacion_aritmetica;
non terminal operacion;
non terminal print;
non terminal print_array;
non terminal operacion_estadistica;
non terminal estadística;
non terminal graficar;
non terminal graficaB;
non terminal graficaP;
non terminal graficaL;
non terminal graficaH;
non terminal titulo;
non terminal ejex;
non terminal ejey;
non terminal titx;
non terminal tity;
non terminal lab;
non terminal vals;
non terminal lista_sentenciasB;
non terminal lista_sentenciasP;
non terminal lista_sentenciasL;
non terminal lista_sentenciasH;
non terminal sentenciaB;
non terminal sentenciaP;
non terminal sentenciaL;
non terminal sentenciaH;

//------> Definir Simbolo Inicial
start with inicio; 


// ------------>  Producciones  <------------

inicio ::= INICIO_CODIGO lista_instrucciones FIN_CODIGO
;

lista_instrucciones ::= instruccion
        | lista_instrucciones instruccion   
;

instruccion ::= variable 
        | array 
        | print
        | print_array
        | graficar
        | error FIN_DECLARACION PUNTO_COMA
;

graficar ::= graficaB
        | graficaP
        | graficaL
        | graficaH
;

graficaB ::= GBARRAS PARENTESIS_APERTURA lista_sentenciasB EJECUTAR GBARRAS:grafica FIN_DECLARACION PUNTO_COMA PARENTESIS_CIERRE FIN_DECLARACION PUNTO_COMA {:
                        Instrucciones.GráficaBarras.generarGráfica(grafica.toString(), tituloGlobal, ejexGlobal, ejeyGlobal, titxGlobal, tityGlobal); :}
;

graficaP ::= GPIE PARENTESIS_APERTURA lista_sentenciasP EJECUTAR GPIE:grafica FIN_DECLARACION PUNTO_COMA PARENTESIS_CIERRE FIN_DECLARACION PUNTO_COMA {:
                        Instrucciones.GráficaPie.generarGráfica(grafica.toString(), labGlobal, valsGlobal, tituloGlobal); :}
;

graficaL ::= GLINEAS PARENTESIS_APERTURA lista_sentenciasL EJECUTAR GLINEAS:grafica FIN_DECLARACION PUNTO_COMA PARENTESIS_CIERRE FIN_DECLARACION PUNTO_COMA {:
                        Instrucciones.GráficaLíneas.generarGráfica(grafica.toString(), tituloGlobal, ejexGlobalL, ejeyGlobalL, titxGlobalL, tityGlobalL); :}
;

graficaH ::= HISTOGRAMA PARENTESIS_APERTURA lista_sentenciasH EJECUTAR HISTOGRAMA:grafica FIN_DECLARACION PUNTO_COMA PARENTESIS_CIERRE FIN_DECLARACION PUNTO_COMA {:
                        Instrucciones.Histograma.generarGráfica(grafica.toString(), tituloGlobal, valsGlobalH); :}
;

lista_sentenciasB ::= sentenciaB:val {: 
                        ArrayList<String> listaSenB = new ArrayList<>();
                        listaSenB.add(val.toString());
                        RESULT = listaSenB;  :}
        | lista_sentenciasB:listaSenB sentenciaB:val {: 
                        ((ArrayList<String>) listaSenB).add(val.toString());
                        RESULT = listaSenB;  :}
;

lista_sentenciasP ::= sentenciaP:val {: 
                        ArrayList<String> listaSenP = new ArrayList<>();
                        listaSenP.add(val.toString());
                        RESULT = listaSenP;  :}
        | lista_sentenciasP:listaSenP sentenciaP:val {: 
                        ((ArrayList<String>) listaSenP).add(val.toString());
                        RESULT = listaSenP;  :}
;

lista_sentenciasL ::= sentenciaL:val {: 
                        ArrayList<String> listaSenL = new ArrayList<>();
                        listaSenL.add(val.toString());
                        RESULT = listaSenL;  :}
        | lista_sentenciasL:listaSenL sentenciaL:val {: 
                        ((ArrayList<String>) listaSenL).add(val.toString());
                        RESULT = listaSenL;  :}
;

lista_sentenciasH ::= sentenciaH:val {: 
                        ArrayList<String> listaSenH = new ArrayList<>();
                        listaSenH.add(val.toString());
                        RESULT = listaSenH;  :}
        | lista_sentenciasH:listaSenH sentenciaH:val {: 
                        ((ArrayList<String>) listaSenH).add(val.toString());
                        RESULT = listaSenH;  :}
;

sentenciaP ::= titulo:tit {: tituloGlobal = tit.toString(); RESULT = tituloGlobal; :}
        | lab:lab         {: labGlobal = (ArrayList<String>) lab; RESULT = labGlobal; :}
        | vals:vals       {: valsGlobal = (ArrayList<String>) vals; RESULT = valsGlobal; :}
;

sentenciaB ::= titulo:tit   {: tituloGlobal = tit.toString(); RESULT = tituloGlobal; :}
        | ejex:ejex         {: ejexGlobal = (ArrayList<String>) ejex; RESULT = ejexGlobal; :}
        | ejey:ejey         {: ejeyGlobal = (ArrayList<String>) ejey; RESULT = ejeyGlobal; :}
        | titx:titx         {: titxGlobal = titx.toString(); RESULT = titxGlobal; :}
        | tity:tity         {: tityGlobal = tity.toString(); RESULT = tityGlobal; :}
;

sentenciaL ::= titulo:tit  {: tituloGlobal = tit.toString(); RESULT = tituloGlobal; :}
        | ejex:ejex        {: ejexGlobalL = (ArrayList<String>) ejex; RESULT = ejexGlobalL; :}
        | ejey:ejey        {: ejeyGlobalL = (ArrayList<String>) ejey; RESULT = ejeyGlobalL; :}
        | titx:titx        {: titxGlobalL = titx.toString(); RESULT = titxGlobalL; :}
        | tity:tity        {: tityGlobalL = tity.toString(); RESULT = tityGlobalL; :}
;

sentenciaH ::= titulo:tit  {: tituloGlobal = tit.toString(); RESULT = tituloGlobal; :}
        | vals:vals        {: valsGlobalH = (ArrayList<String>) vals; RESULT = valsGlobalH; :}
;

titulo ::= GTITULO DOS_PUNTOS DOS_PUNTOS CHAR IGUAL expresion:val FIN_DECLARACION PUNTO_COMA {: 
                        RESULT = val.toString(); :}
;

ejex ::= X DOS_PUNTOS DOS_PUNTOS CHAR IGUAL CORCHETE_APERTURA lista_expresiones:listaexp CORCHETE_CIERRE FIN_DECLARACION PUNTO_COMA {: 
                        RESULT = (ArrayList<String>) listaexp; :}
        | X DOS_PUNTOS DOS_PUNTOS CHAR IGUAL expresion:exp FIN_DECLARACION PUNTO_COMA {:
                        RESULT = Instrucciones.Arreglos.obtenerArray(exp.toString()); :}
;

ejey ::= Y DOS_PUNTOS DOS_PUNTOS DOUBLE IGUAL CORCHETE_APERTURA lista_expresiones:listaexp CORCHETE_CIERRE FIN_DECLARACION PUNTO_COMA {: 
                        RESULT = (ArrayList<String>) listaexp; :}
        | Y DOS_PUNTOS DOS_PUNTOS DOUBLE IGUAL expresion:exp FIN_DECLARACION PUNTO_COMA {:
                        RESULT = Instrucciones.Arreglos.obtenerArray(exp.toString()); :}
;

titx ::= tX DOS_PUNTOS DOS_PUNTOS CHAR IGUAL expresion:val FIN_DECLARACION PUNTO_COMA {: 
                        RESULT = val.toString(); :}
;

tity ::= tY DOS_PUNTOS DOS_PUNTOS CHAR IGUAL expresion:val FIN_DECLARACION PUNTO_COMA {: 
                        RESULT = val.toString(); :}
;

lab ::= LABEL DOS_PUNTOS DOS_PUNTOS CHAR IGUAL CORCHETE_APERTURA lista_expresiones:listaexp CORCHETE_CIERRE FIN_DECLARACION PUNTO_COMA {: 
                        RESULT = (ArrayList<String>) listaexp; :}
        | LABEL DOS_PUNTOS DOS_PUNTOS CHAR IGUAL expresion:exp FIN_DECLARACION PUNTO_COMA {:
                        RESULT = Instrucciones.Arreglos.obtenerArray(exp.toString()); :}
;

vals ::= VALUES DOS_PUNTOS DOS_PUNTOS DOUBLE IGUAL CORCHETE_APERTURA lista_expresiones:listaexp CORCHETE_CIERRE FIN_DECLARACION PUNTO_COMA {: 
                        RESULT = (ArrayList<String>) listaexp; :}
        | VALUES DOS_PUNTOS DOS_PUNTOS DOUBLE IGUAL expresion:exp FIN_DECLARACION PUNTO_COMA {:
                        RESULT = Instrucciones.Arreglos.obtenerArray(exp.toString()); :}
;

print ::= CONSOLE DOS_PUNTOS DOS_PUNTOS IMPRIMIR IGUAL lista_expresiones:listaexp FIN_DECLARACION PUNTO_COMA {: 
                        resultado = Instrucciones.Impresión.instrucciónPrint((ArrayList<String>) listaexp); :}
;

print_array ::= CONSOLE DOS_PUNTOS DOS_PUNTOS COLUMN IGUAL expresion:titulo GUION MAYORQUE expresion:nombreArray FIN_DECLARACION PUNTO_COMA {: 
                        resultado = Instrucciones.ImpresiónArreglos.imprimirArregloPorNombre(titulo.toString(), nombreArray.toString()); :}
        | CONSOLE DOS_PUNTOS DOS_PUNTOS COLUMN IGUAL expresion:titulo GUION MAYORQUE CORCHETE_APERTURA lista_expresiones:listaexp CORCHETE_CIERRE FIN_DECLARACION PUNTO_COMA {: 
                        resultado = Instrucciones.ImpresiónArreglos.imprimirArreglo(titulo.toString(), (ArrayList<String>) listaexp); :}
;

operacion_aritmetica ::= operacion:op PARENTESIS_APERTURA expresion:izq COMA expresion:der PARENTESIS_CIERRE {: 
                        RESULT = Instrucciones.Aritméticas.realizarOperación(op.toString(), izq.toString(), der.toString() ); :}
;

operacion_estadistica ::= estadística:op PARENTESIS_APERTURA expresion:exp PARENTESIS_CIERRE {: 
                        ArrayList<String> valores = Instrucciones.Arreglos.obtenerArray(exp.toString());
                        RESULT = Instrucciones.Estadísticas.realizarOperaciónEstadística(op.toString(), valores);:}
        | estadística:op PARENTESIS_APERTURA CORCHETE_APERTURA lista_expresiones:listaexp CORCHETE_CIERRE PARENTESIS_CIERRE {: 
                        RESULT = Instrucciones.Estadísticas.realizarOperaciónEstadística(op.toString(), (ArrayList<String>) listaexp); :}
;

estadística ::= MEDIA:val   {: RESULT = val.toString(); :}
        | MEDIANA:val       {: RESULT = val.toString(); :}
        | MODA:val          {: RESULT = val.toString(); :}
        | VARIANZA:val      {: RESULT = val.toString(); :}
        | MAX:val           {: RESULT = val.toString(); :}
        | MIN:val           {: RESULT = val.toString(); :}
;

variable ::= VAR DOS_PUNTOS tipo:tipoVar DOS_PUNTOS DOS_PUNTOS ID_VAR:id MENORQUE GUION expresion:valor FIN_DECLARACION PUNTO_COMA {: 
                        Instrucciones.Variables.datosReporteVariables(id.toString(), (String) tipoVar, valor.toString());
                        System.out.println("Asignando valor a la variable " + id.toString() + ": " + valor.toString());
                        Instrucciones.Variables.asignarVariable(id.toString(), valor.toString()); :}
;

operacion ::= SUMA:val          {: RESULT = val.toString(); :}
        | RESTA :val            {: RESULT = val.toString(); :}
        | MULTIPLICACION:val    {: RESULT = val.toString(); :}
        | DIVISION:val          {: RESULT = val.toString(); :}
        | MODULO:val            {: RESULT = val.toString(); :}
;

array ::= ARRAY DOS_PUNTOS tipo:tipoArr DOS_PUNTOS DOS_PUNTOS ID_ARRAY:id MENORQUE GUION CORCHETE_APERTURA lista_expresiones:listaexp CORCHETE_CIERRE FIN_DECLARACION PUNTO_COMA {:
                        StringBuilder sb = new StringBuilder();
                        for (String expresion : (ArrayList<String>) listaexp) {
                            sb.append(expresion).append(", "); 
                        }
                        String expresiones = sb.toString();
                        if (expresiones.length() > 2) { 
                            expresiones = expresiones.substring(0, expresiones.length() - 2);
                        }
                        Instrucciones.Arreglos.datosReporteArreglo(id.toString(), (String) tipoArr, (ArrayList<String>) listaexp);
                        System.out.println("Asignando valores a la variable " + id.toString() + ": [" + expresiones + "]");
                        Instrucciones.Arreglos.asignarArray(id.toString(),(ArrayList<String>) listaexp); :}
;

tipo ::= DOUBLE:tip    {: RESULT = tip.toString(); :}
        | CHAR:tip     {: RESULT = tip.toString(); :}
;

lista_expresiones ::= expresion:val {: 
                        ArrayList<String> listaExp = new ArrayList<>();
                        listaExp.add(val.toString());
                        RESULT = listaExp;  :}
        | lista_expresiones:listaExp COMA expresion:val {: 
                        ((ArrayList<String>) listaExp).add(val.toString());
                        RESULT = listaExp;  :}
;

expresion ::= ENTERO:val            {: RESULT = val.toString(); :}
        | DECIMAL:val               {: RESULT = val.toString(); :}
        | CADENA:val                {: RESULT = val.toString(); :}
        | ID_VAR:val                {: RESULT = Instrucciones.Variables.obtenerVariable(val.toString()); :}
        | operacion_aritmetica:val  {: RESULT = val.toString(); :}
        | operacion_estadistica:val {: RESULT = val.toString(); :}
        | ID_ARRAY:val              {: RESULT = val.toString(); :}
;

