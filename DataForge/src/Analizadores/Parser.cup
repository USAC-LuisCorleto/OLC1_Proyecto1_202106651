// ------------  Paquete e importaciones ------------
package Analizadores;

import java_cup.runtime.*;
import java.util.ArrayList;
import Reportes.ReporteErrores;
import Reportes.ErrorObj;


//------> Codigo para el parser
//------> Declaracion de variables, funciones y funciones de error

parser code 
{:
    public static String resultado = ""; 

    public void syntax_error(Symbol s)
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
            ReporteErrores.TablaErroresSintácticos.add(new ErrorObj("Sintáctico", s.value.toString(), Integer.toString(s.right), Integer.toString(s.left))); 
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
    }

:}


//------> Codigo para las acciones gramaticales (no tocar)
action code
{:  :}


//------> Declaración de terminales
/*-----PALABRAS RESERVADAS-----*/
terminal String INICIO_CODIGO;
terminal String FIN_CODIGO;
terminal String FIN_DECLARACION;
terminal String VAR;
terminal String DOUBLE;
terminal String CHAR;
terminal String ARRAY;
terminal String SUMA;
terminal String RESTA;
terminal String MULTIPLICACION;
terminal String DIVISION;
terminal String MODULO;
terminal String CONSOLE;
terminal String IMPRIMIR;
terminal String MEDIA;
terminal String MEDIANA;
terminal String MODA;
terminal String VARIANZA;
terminal String MAX;
terminal String MIN;

/*-----PRÍNCIPAL-----*/
terminal String ENTERO;
terminal String DECIMAL;
terminal String LETRA;
terminal String ID_VAR;
terminal String ID_ARRAY;
terminal String CADENA;

/*-----CONCATENADORES-----*/
terminal String CORCHETE_APERTURA;
terminal String CORCHETE_CIERRE;
terminal String PARENTESIS_APERTURA;
terminal String PARENTESIS_CIERRE;

/*-----SÍMBOLOS-----*/
terminal String DOS_PUNTOS;
terminal String PUNTO_COMA;
terminal String MENORQUE;
terminal String MAYORQUE;
terminal String GUION;
terminal String COMA;
terminal String IGUAL;

//------> Declaración de no terminales
non terminal inicio;
non terminal lista_instrucciones;
non terminal instruccion;
non terminal variable;
non terminal array;
non terminal tipo;
non terminal expresion;
non terminal lista_expresiones;
non terminal operacion_aritmetica;
non terminal operacion;
non terminal double_aritmetica;
non terminal print;
non terminal operacion_estadistica;

//------> Definir Simbolo Inicial
start with inicio; 


// ------------>  Producciones  <------------

inicio ::= INICIO_CODIGO lista_instrucciones FIN_CODIGO
;

lista_instrucciones ::= instruccion
        | lista_instrucciones instruccion
;

instruccion ::= variable 
        | array 
        | print
;

print ::= CONSOLE DOS_PUNTOS DOS_PUNTOS IMPRIMIR IGUAL lista_expresiones:listaexp FIN_DECLARACION PUNTO_COMA {: resultado = Instrucciones.Impresión.instrucciónPrint((ArrayList<String>) listaexp); :}
;

operacion_aritmetica ::= operacion:op PARENTESIS_APERTURA expresion:izq COMA expresion:der PARENTESIS_CIERRE {: 
                        RESULT = Instrucciones.Aritméticas.realizarOperación(op.toString(), izq.toString(), der.toString() ); :}
;

operacion_estadistica ::= MEDIA PARENTESIS_APERTURA expresion PARENTESIS_CIERRE
        | MEDIANA PARENTESIS_APERTURA expresion PARENTESIS_CIERRE
        | MODA PARENTESIS_APERTURA expresion PARENTESIS_CIERRE
        | VARIANZA PARENTESIS_APERTURA expresion PARENTESIS_CIERRE
        | MAX PARENTESIS_APERTURA expresion PARENTESIS_CIERRE
        | MIN PARENTESIS_APERTURA expresion PARENTESIS_CIERRE
;

variable ::= VAR DOS_PUNTOS tipo DOS_PUNTOS DOS_PUNTOS ID_VAR:id MENORQUE GUION expresion:valor FIN_DECLARACION PUNTO_COMA {: 
                        System.out.println("Asignando valor a la variable " + id.toString() + ": " + valor.toString());
                        Instrucciones.Variables.asignarVariable(id.toString(), valor.toString()); :}
;

operacion ::= SUMA:val          {: RESULT = val.toString(); :}
        | RESTA :val            {: RESULT = val.toString(); :}
        | MULTIPLICACION:val    {: RESULT = val.toString(); :}
        | DIVISION:val          {: RESULT = val.toString(); :}
        | MODULO:val            {: RESULT = val.toString(); :}
;

array ::= ARRAY DOS_PUNTOS tipo DOS_PUNTOS DOS_PUNTOS ID_ARRAY:id MENORQUE GUION CORCHETE_APERTURA lista_expresiones:listaexp CORCHETE_CIERRE FIN_DECLARACION PUNTO_COMA {:
                        StringBuilder sb = new StringBuilder();
                        for (String expresion : (ArrayList<String>) listaexp) {
                            sb.append(expresion).append(", "); 
                        }
                        String expresiones = sb.toString();
                        if (expresiones.length() > 2) { 
                            expresiones = expresiones.substring(0, expresiones.length() - 2);
                        }
                        System.out.println("Asignando valores a la variable " + id.toString() + ": [" + expresiones + "]");
                        Instrucciones.Arreglos.asignarArray(id.toString(),(ArrayList<String>) listaexp); :}
;

tipo ::= DOUBLE
        | CHAR
;

lista_expresiones ::= expresion:val {: 
                        ArrayList<String> listaExp = new ArrayList<>();
                        listaExp.add(val.toString());
                        RESULT = listaExp;  :}
        | lista_expresiones:listaExp COMA expresion:val {: 
                        ((ArrayList<String>) listaExp).add(val.toString());
                        RESULT = listaExp;  :}
;

expresion ::= ENTERO:val            {: RESULT = val.toString(); :}
        | DECIMAL:val               {: RESULT = val.toString(); :}
        | CADENA:val                {: RESULT = val.toString(); :}
        | ID_VAR:val                {: RESULT = val.toString(); :}
        | operacion_aritmetica:val  {: RESULT = val.toString(); :}
        | operacion_estadistica:val {: RESULT = val.toString(); :}
        | array:val                 {: RESULT = val.toString(); :}
        | ID_ARRAY:val              {: RESULT = val.toString(); :}
;

