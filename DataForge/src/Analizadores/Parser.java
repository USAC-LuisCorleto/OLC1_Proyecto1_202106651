
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import java.util.ArrayList;
import Reportes.ReporteErrores;
import Reportes.ErrorObj;
import java.util.HashMap;
import java.util.Map;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\102\000\002\002\004\000\002\002\005\000\002\003" +
    "\003\000\002\003\004\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\021\003\000\002\021\003\000\002\022\014\000\002" +
    "\023\014\000\002\033\003\000\002\033\004\000\002\034" +
    "\003\000\002\034\004\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\024\012\000\002\025\014\000\002\025\012\000\002\026" +
    "\014\000\002\026\012\000\002\027\012\000\002\030\012" +
    "\000\002\031\014\000\002\031\012\000\002\032\014\000" +
    "\002\032\012\000\002\015\012\000\002\016\015\000\002" +
    "\016\017\000\002\012\010\000\002\017\006\000\002\017" +
    "\010\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\005\015\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\006" +
    "\017\000\002\007\003\000\002\007\003\000\002\011\003" +
    "\000\002\011\005\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\315\000\004\004\004\001\002\000\014\007\016\012" +
    "\011\020\021\032\013\033\014\001\002\000\004\002\006" +
    "\001\002\000\004\002\001\001\002\000\016\005\ufffb\007" +
    "\ufffb\012\ufffb\020\ufffb\032\ufffb\033\ufffb\001\002\000\016" +
    "\005\ufff7\007\ufff7\012\ufff7\020\ufff7\032\ufff7\033\ufff7\001" +
    "\002\000\004\055\304\001\002\000\016\005\ufffd\007\ufffd" +
    "\012\ufffd\020\ufffd\032\ufffd\033\ufffd\001\002\000\004\053" +
    "\212\001\002\000\004\053\132\001\002\000\016\005\uffff" +
    "\007\uffff\012\uffff\020\uffff\032\uffff\033\uffff\001\002\000" +
    "\004\055\116\001\002\000\016\005\ufffc\007\ufffc\012\ufffc" +
    "\020\ufffc\032\ufffc\033\ufffc\001\002\000\016\005\ufffa\007" +
    "\ufffa\012\ufffa\020\ufffa\032\ufffa\033\ufffa\001\002\000\004" +
    "\055\027\001\002\000\016\005\ufff9\007\ufff9\012\ufff9\020" +
    "\ufff9\032\ufff9\033\ufff9\001\002\000\016\005\ufff8\007\ufff8" +
    "\012\ufff8\020\ufff8\032\ufff8\033\ufff8\001\002\000\016\005" +
    "\026\007\016\012\011\020\021\032\013\033\014\001\002" +
    "\000\016\005\ufffe\007\ufffe\012\ufffe\020\ufffe\032\ufffe\033" +
    "\ufffe\001\002\000\004\002\000\001\002\000\004\055\030" +
    "\001\002\000\006\021\032\030\031\001\002\000\004\063" +
    "\102\001\002\000\004\063\033\001\002\000\042\013\037" +
    "\014\061\015\034\016\040\017\043\022\056\023\050\024" +
    "\060\025\052\026\055\027\047\043\054\044\036\046\053" +
    "\047\045\050\035\001\002\000\004\053\uffce\001\002\000" +
    "\014\006\uffc4\052\uffc4\054\uffc4\061\uffc4\062\uffc4\001\002" +
    "\000\014\006\uffc5\052\uffc5\054\uffc5\061\uffc5\062\uffc5\001" +
    "\002\000\004\053\uffd0\001\002\000\004\053\uffcd\001\002" +
    "\000\010\006\uffc8\052\uffc8\062\uffc8\001\002\000\006\006" +
    "\100\062\073\001\002\000\004\053\uffcc\001\002\000\004" +
    "\053\067\001\002\000\014\006\uffc0\052\uffc0\054\uffc0\061" +
    "\uffc0\062\uffc0\001\002\000\014\006\uffc1\052\uffc1\054\uffc1" +
    "\061\uffc1\062\uffc1\001\002\000\004\053\uffd2\001\002\000" +
    "\004\053\uffd6\001\002\000\014\006\uffc2\052\uffc2\054\uffc2" +
    "\061\uffc2\062\uffc2\001\002\000\004\053\uffd4\001\002\000" +
    "\014\006\uffc3\052\uffc3\054\uffc3\061\uffc3\062\uffc3\001\002" +
    "\000\014\006\uffc6\052\uffc6\054\uffc6\061\uffc6\062\uffc6\001" +
    "\002\000\004\053\uffd3\001\002\000\004\053\uffd7\001\002" +
    "\000\004\053\062\001\002\000\004\053\uffd5\001\002\000" +
    "\004\053\uffcf\001\002\000\042\013\037\014\061\015\034" +
    "\016\040\017\043\022\056\023\050\024\060\025\052\026" +
    "\055\027\047\043\054\044\036\046\053\047\045\050\035" +
    "\001\002\000\004\062\064\001\002\000\042\013\037\014" +
    "\061\015\034\016\040\017\043\022\056\023\050\024\060" +
    "\025\052\026\055\027\047\043\054\044\036\046\053\047" +
    "\045\050\035\001\002\000\004\054\066\001\002\000\014" +
    "\006\uffda\052\uffda\054\uffda\061\uffda\062\uffda\001\002\000" +
    "\044\013\037\014\061\015\034\016\040\017\043\022\056" +
    "\023\050\024\060\025\052\026\055\027\047\043\054\044" +
    "\036\046\053\047\045\050\035\051\071\001\002\000\004" +
    "\054\077\001\002\000\042\013\037\014\061\015\034\016" +
    "\040\017\043\022\056\023\050\024\060\025\052\026\055" +
    "\027\047\043\054\044\036\046\053\047\045\050\035\001" +
    "\002\000\006\052\074\062\073\001\002\000\042\013\037" +
    "\014\061\015\034\016\040\017\043\022\056\023\050\024" +
    "\060\025\052\026\055\027\047\043\054\044\036\046\053" +
    "\047\045\050\035\001\002\000\004\054\075\001\002\000" +
    "\014\006\uffd8\052\uffd8\054\uffd8\061\uffd8\062\uffd8\001\002" +
    "\000\010\006\uffc7\052\uffc7\062\uffc7\001\002\000\014\006" +
    "\uffd9\052\uffd9\054\uffd9\061\uffd9\062\uffd9\001\002\000\004" +
    "\056\101\001\002\000\016\005\uffdd\007\uffdd\012\uffdd\020" +
    "\uffdd\032\uffdd\033\uffdd\001\002\000\042\013\037\014\061" +
    "\015\034\016\040\017\043\022\056\023\050\024\060\025" +
    "\052\026\055\027\047\043\054\044\036\046\053\047\045" +
    "\050\035\001\002\000\004\061\104\001\002\000\004\060" +
    "\105\001\002\000\044\013\037\014\061\015\034\016\040" +
    "\017\043\022\056\023\050\024\060\025\052\026\055\027" +
    "\047\043\054\044\036\046\053\047\045\050\035\051\107" +
    "\001\002\000\004\006\114\001\002\000\042\013\037\014" +
    "\061\015\034\016\040\017\043\022\056\023\050\024\060" +
    "\025\052\026\055\027\047\043\054\044\036\046\053\047" +
    "\045\050\035\001\002\000\006\052\111\062\073\001\002" +
    "\000\004\006\112\001\002\000\004\056\113\001\002\000" +
    "\016\005\uffdb\007\uffdb\012\uffdb\020\uffdb\032\uffdb\033\uffdb" +
    "\001\002\000\004\056\115\001\002\000\016\005\uffdc\007" +
    "\uffdc\012\uffdc\020\uffdc\032\uffdc\033\uffdc\001\002\000\006" +
    "\010\117\011\121\001\002\000\004\055\uffca\001\002\000" +
    "\004\055\122\001\002\000\004\055\uffc9\001\002\000\004" +
    "\055\123\001\002\000\004\046\124\001\002\000\004\057" +
    "\125\001\002\000\004\061\126\001\002\000\042\013\037" +
    "\014\061\015\034\016\040\017\043\022\056\023\050\024" +
    "\060\025\052\026\055\027\047\043\054\044\036\046\053" +
    "\047\045\050\035\001\002\000\004\006\130\001\002\000" +
    "\004\056\131\001\002\000\016\005\uffd1\007\uffd1\012\uffd1" +
    "\020\uffd1\032\uffd1\033\uffd1\001\002\000\010\034\136\041" +
    "\135\042\133\001\002\000\004\055\176\001\002\000\012" +
    "\031\ufff0\034\ufff0\041\ufff0\042\ufff0\001\002\000\004\055" +
    "\162\001\002\000\004\055\153\001\002\000\012\031\uffef" +
    "\034\uffef\041\uffef\042\uffef\001\002\000\012\031\ufff2\034" +
    "\ufff2\041\ufff2\042\ufff2\001\002\000\012\031\144\034\136" +
    "\041\135\042\133\001\002\000\012\031\uffee\034\uffee\041" +
    "\uffee\042\uffee\001\002\000\012\031\ufff1\034\ufff1\041\ufff1" +
    "\042\ufff1\001\002\000\004\033\145\001\002\000\004\006" +
    "\146\001\002\000\004\056\147\001\002\000\004\054\150" +
    "\001\002\000\004\006\151\001\002\000\004\056\152\001" +
    "\002\000\016\005\ufff5\007\ufff5\012\ufff5\020\ufff5\032\ufff5" +
    "\033\ufff5\001\002\000\004\055\154\001\002\000\004\011" +
    "\155\001\002\000\004\063\156\001\002\000\042\013\037" +
    "\014\061\015\034\016\040\017\043\022\056\023\050\024" +
    "\060\025\052\026\055\027\047\043\054\044\036\046\053" +
    "\047\045\050\035\001\002\000\004\006\160\001\002\000" +
    "\004\056\161\001\002\000\022\031\uffe8\034\uffe8\035\uffe8" +
    "\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\001\002\000" +
    "\004\055\163\001\002\000\004\011\164\001\002\000\004" +
    "\063\165\001\002\000\044\013\037\014\061\015\034\016" +
    "\040\017\043\022\056\023\050\024\060\025\052\026\055" +
    "\027\047\043\054\044\036\046\053\047\045\050\035\051" +
    "\167\001\002\000\004\006\174\001\002\000\042\013\037" +
    "\014\061\015\034\016\040\017\043\022\056\023\050\024" +
    "\060\025\052\026\055\027\047\043\054\044\036\046\053" +
    "\047\045\050\035\001\002\000\006\052\171\062\073\001" +
    "\002\000\004\006\172\001\002\000\004\056\173\001\002" +
    "\000\012\031\uffe1\034\uffe1\041\uffe1\042\uffe1\001\002\000" +
    "\004\056\175\001\002\000\012\031\uffe0\034\uffe0\041\uffe0" +
    "\042\uffe0\001\002\000\004\055\177\001\002\000\004\010" +
    "\200\001\002\000\004\063\201\001\002\000\044\013\037" +
    "\014\061\015\034\016\040\017\043\022\056\023\050\024" +
    "\060\025\052\026\055\027\047\043\054\044\036\046\053" +
    "\047\045\050\035\051\203\001\002\000\004\006\210\001" +
    "\002\000\042\013\037\014\061\015\034\016\040\017\043" +
    "\022\056\023\050\024\060\025\052\026\055\027\047\043" +
    "\054\044\036\046\053\047\045\050\035\001\002\000\006" +
    "\052\205\062\073\001\002\000\004\006\206\001\002\000" +
    "\004\056\207\001\002\000\012\031\uffdf\034\uffdf\041\uffdf" +
    "\042\uffdf\001\002\000\004\056\211\001\002\000\012\031" +
    "\uffde\034\uffde\041\uffde\042\uffde\001\002\000\014\034\136" +
    "\035\215\036\214\037\222\040\221\001\002\000\016\031" +
    "\ufff4\034\ufff4\035\ufff4\036\ufff4\037\ufff4\040\ufff4\001\002" +
    "\000\004\055\270\001\002\000\004\055\254\001\002\000" +
    "\016\031\uffed\034\uffed\035\uffed\036\uffed\037\uffed\040\uffed" +
    "\001\002\000\016\031\uffeb\034\uffeb\035\uffeb\036\uffeb\037" +
    "\uffeb\040\uffeb\001\002\000\016\031\uffec\034\uffec\035\uffec" +
    "\036\uffec\037\uffec\040\uffec\001\002\000\004\055\245\001" +
    "\002\000\004\055\236\001\002\000\016\031\uffe9\034\uffe9" +
    "\035\uffe9\036\uffe9\037\uffe9\040\uffe9\001\002\000\016\031" +
    "\227\034\136\035\215\036\214\037\222\040\221\001\002" +
    "\000\016\031\uffea\034\uffea\035\uffea\036\uffea\037\uffea\040" +
    "\uffea\001\002\000\016\031\ufff3\034\ufff3\035\ufff3\036\ufff3" +
    "\037\ufff3\040\ufff3\001\002\000\004\032\230\001\002\000" +
    "\004\006\231\001\002\000\004\056\232\001\002\000\004" +
    "\054\233\001\002\000\004\006\234\001\002\000\004\056" +
    "\235\001\002\000\016\005\ufff6\007\ufff6\012\ufff6\020\ufff6" +
    "\032\ufff6\033\ufff6\001\002\000\004\055\237\001\002\000" +
    "\004\011\240\001\002\000\004\063\241\001\002\000\042" +
    "\013\037\014\061\015\034\016\040\017\043\022\056\023" +
    "\050\024\060\025\052\026\055\027\047\043\054\044\036" +
    "\046\053\047\045\050\035\001\002\000\004\006\243\001" +
    "\002\000\004\056\244\001\002\000\016\031\uffe3\034\uffe3" +
    "\035\uffe3\036\uffe3\037\uffe3\040\uffe3\001\002\000\004\055" +
    "\246\001\002\000\004\011\247\001\002\000\004\063\250" +
    "\001\002\000\042\013\037\014\061\015\034\016\040\017" +
    "\043\022\056\023\050\024\060\025\052\026\055\027\047" +
    "\043\054\044\036\046\053\047\045\050\035\001\002\000" +
    "\004\006\252\001\002\000\004\056\253\001\002\000\016" +
    "\031\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\001" +
    "\002\000\004\055\255\001\002\000\004\011\256\001\002" +
    "\000\004\063\257\001\002\000\044\013\037\014\061\015" +
    "\034\016\040\017\043\022\056\023\050\024\060\025\052" +
    "\026\055\027\047\043\054\044\036\046\053\047\045\050" +
    "\035\051\261\001\002\000\004\006\266\001\002\000\042" +
    "\013\037\014\061\015\034\016\040\017\043\022\056\023" +
    "\050\024\060\025\052\026\055\027\047\043\054\044\036" +
    "\046\053\047\045\050\035\001\002\000\006\052\263\062" +
    "\073\001\002\000\004\006\264\001\002\000\004\056\265" +
    "\001\002\000\016\031\uffe7\034\uffe7\035\uffe7\036\uffe7\037" +
    "\uffe7\040\uffe7\001\002\000\004\056\267\001\002\000\016" +
    "\031\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\001" +
    "\002\000\004\055\271\001\002\000\004\010\272\001\002" +
    "\000\004\063\273\001\002\000\044\013\037\014\061\015" +
    "\034\016\040\017\043\022\056\023\050\024\060\025\052" +
    "\026\055\027\047\043\054\044\036\046\053\047\045\050" +
    "\035\051\275\001\002\000\004\006\302\001\002\000\042" +
    "\013\037\014\061\015\034\016\040\017\043\022\056\023" +
    "\050\024\060\025\052\026\055\027\047\043\054\044\036" +
    "\046\053\047\045\050\035\001\002\000\006\052\277\062" +
    "\073\001\002\000\004\006\300\001\002\000\004\056\301" +
    "\001\002\000\016\031\uffe5\034\uffe5\035\uffe5\036\uffe5\037" +
    "\uffe5\040\uffe5\001\002\000\004\056\303\001\002\000\016" +
    "\031\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\001" +
    "\002\000\006\010\117\011\121\001\002\000\004\055\306" +
    "\001\002\000\004\055\307\001\002\000\004\047\310\001" +
    "\002\000\004\057\311\001\002\000\004\061\312\001\002" +
    "\000\004\051\313\001\002\000\042\013\037\014\061\015" +
    "\034\016\040\017\043\022\056\023\050\024\060\025\052" +
    "\026\055\027\047\043\054\044\036\046\053\047\045\050" +
    "\035\001\002\000\006\052\315\062\073\001\002\000\004" +
    "\006\316\001\002\000\004\056\317\001\002\000\016\005" +
    "\uffcb\007\uffcb\012\uffcb\020\uffcb\032\uffcb\033\uffcb\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\315\000\004\002\004\001\001\000\024\003\023\004" +
    "\014\005\011\006\016\015\006\016\017\021\021\022\022" +
    "\023\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\004\024\005\011\006\016\015\006\016\017\021\021" +
    "\022\022\023\007\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\010\040\011\041\012\050\013" +
    "\056\017\045\020\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\010\062\012\050\013\056\017" +
    "\045\020\043\001\001\000\002\001\001\000\014\010\064" +
    "\012\050\013\056\017\045\020\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\010\067\012\050\013\056" +
    "\017\045\020\043\001\001\000\002\001\001\000\016\010" +
    "\040\011\071\012\050\013\056\017\045\020\043\001\001" +
    "\000\002\001\001\000\014\010\075\012\050\013\056\017" +
    "\045\020\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\010\102\012\050\013\056\017\045" +
    "\020\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\010\105\012\050\013\056\017\045\020\043\001\001" +
    "\000\002\001\001\000\016\010\040\011\107\012\050\013" +
    "\056\017\045\020\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\117\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\010\126\012\050\013\056\017\045\020\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\024\133\031\136\032\141\034\140\036\137\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\024\133\031\136\032\141\036\142\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\010\156\012\050" +
    "\013\056\017\045\020\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\010\165\012\050\013" +
    "\056\017\045\020\043\001\001\000\002\001\001\000\016" +
    "\010\040\011\167\012\050\013\056\017\045\020\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\010\201\012\050\013\056\017\045\020\043\001\001\000" +
    "\002\001\001\000\016\010\040\011\203\012\050\013\056" +
    "\017\045\020\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\024\215\025\217\026\216\027" +
    "\224\030\222\033\223\035\212\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\024\215\025\217\026" +
    "\216\027\224\030\222\035\225\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\010\241\012\050\013\056" +
    "\017\045\020\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\010\250\012\050\013\056\017" +
    "\045\020\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\010\257\012\050\013\056\017\045" +
    "\020\043\001\001\000\002\001\001\000\016\010\040\011" +
    "\261\012\050\013\056\017\045\020\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\010\273\012" +
    "\050\013\056\017\045\020\043\001\001\000\002\001\001" +
    "\000\016\010\040\011\275\012\050\013\056\017\045\020" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\304\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\010\040\011\313\012\050" +
    "\013\056\017\045\020\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private String tituloGlobal;
    private ArrayList<String> ejexGlobal;
    private ArrayList<String> ejeyGlobal;
    private String titxGlobal;
    private String tityGlobal;
    private ArrayList<String> labGlobal;
    private ArrayList<String> valsGlobal;
    public static String resultado = ""; 

    public void syntax_error(Symbol s)
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
            ReporteErrores.TablaErroresSintácticos.add(new ErrorObj("Sintáctico", "El caracter: '" + s.value.toString() + "' no cumple las reglas del lenguaje.", Integer.toString(s.right), Integer.toString(s.left))); 
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {

  
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= INICIO_CODIGO lista_instrucciones FIN_CODIGO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lista_instrucciones ::= instruccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instrucciones",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lista_instrucciones ::= lista_instrucciones instruccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instrucciones",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= array 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= print 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= print_array 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= graficar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // graficar ::= graficaB 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficar",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // graficar ::= graficaP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficar",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // graficaB ::= GBARRAS PARENTESIS_APERTURA lista_sentenciasB EJECUTAR GBARRAS FIN_DECLARACION PUNTO_COMA PARENTESIS_CIERRE FIN_DECLARACION PUNTO_COMA 
            {
              Object RESULT =null;
		int graficaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int graficaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String grafica = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		
                        Instrucciones.GráficaBarras.generarGráfica(grafica.toString(), tituloGlobal, ejexGlobal, ejeyGlobal, titxGlobal, tityGlobal); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficaB",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // graficaP ::= GPIE PARENTESIS_APERTURA lista_sentenciasP EJECUTAR GPIE FIN_DECLARACION PUNTO_COMA PARENTESIS_CIERRE FIN_DECLARACION PUNTO_COMA 
            {
              Object RESULT =null;
		int graficaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int graficaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String grafica = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		
                        Instrucciones.GráficaPie.generarGráfica(grafica.toString(), labGlobal, valsGlobal, tituloGlobal); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficaP",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // lista_sentenciasB ::= sentenciaB 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        ArrayList<String> listaSenB = new ArrayList<>();
                        listaSenB.add(val.toString());
                        RESULT = listaSenB;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_sentenciasB",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // lista_sentenciasB ::= lista_sentenciasB sentenciaB 
            {
              Object RESULT =null;
		int listaSenBleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaSenBright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object listaSenB = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        ((ArrayList<String>) listaSenB).add(val.toString());
                        RESULT = listaSenB;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_sentenciasB",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // lista_sentenciasP ::= sentenciaP 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        ArrayList<String> listaSenP = new ArrayList<>();
                        listaSenP.add(val.toString());
                        RESULT = listaSenP;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_sentenciasP",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // lista_sentenciasP ::= lista_sentenciasP sentenciaP 
            {
              Object RESULT =null;
		int listaSenPleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaSenPright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object listaSenP = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        ((ArrayList<String>) listaSenP).add(val.toString());
                        RESULT = listaSenP;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_sentenciasP",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sentenciaP ::= titulo 
            {
              Object RESULT =null;
		int titleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int titright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tit = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 tituloGlobal = tit.toString(); RESULT = tituloGlobal; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaP",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sentenciaP ::= lab 
            {
              Object RESULT =null;
		int lableft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int labright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lab = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 labGlobal = (ArrayList<String>) lab; RESULT = labGlobal; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaP",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentenciaP ::= vals 
            {
              Object RESULT =null;
		int valsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object vals = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 valsGlobal = (ArrayList<String>) vals; RESULT = valsGlobal; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaP",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentenciaB ::= titulo 
            {
              Object RESULT =null;
		int titleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int titright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tit = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 tituloGlobal = tit.toString(); RESULT = tituloGlobal; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaB",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentenciaB ::= ejex 
            {
              Object RESULT =null;
		int ejexleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ejexright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ejex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ejexGlobal = (ArrayList<String>) ejex; RESULT = ejexGlobal; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaB",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentenciaB ::= ejey 
            {
              Object RESULT =null;
		int ejeyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ejeyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ejey = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ejeyGlobal = (ArrayList<String>) ejey; RESULT = ejeyGlobal; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaB",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentenciaB ::= titx 
            {
              Object RESULT =null;
		int titxleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int titxright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object titx = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 titxGlobal = titx.toString(); RESULT = titxGlobal; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaB",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sentenciaB ::= tity 
            {
              Object RESULT =null;
		int tityleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tityright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tity = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 tityGlobal = tity.toString(); RESULT = tityGlobal; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaB",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // titulo ::= GTITULO DOS_PUNTOS DOS_PUNTOS CHAR IGUAL expresion FIN_DECLARACION PUNTO_COMA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
                        RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("titulo",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ejex ::= X DOS_PUNTOS DOS_PUNTOS CHAR IGUAL CORCHETE_APERTURA lista_expresiones CORCHETE_CIERRE FIN_DECLARACION PUNTO_COMA 
            {
              Object RESULT =null;
		int listaexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int listaexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object listaexp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 
                        RESULT = (ArrayList<String>) listaexp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ejex",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ejex ::= X DOS_PUNTOS DOS_PUNTOS CHAR IGUAL expresion FIN_DECLARACION PUNTO_COMA 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                        RESULT = Instrucciones.Arreglos.obtenerArray(exp.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ejex",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ejey ::= Y DOS_PUNTOS DOS_PUNTOS DOUBLE IGUAL CORCHETE_APERTURA lista_expresiones CORCHETE_CIERRE FIN_DECLARACION PUNTO_COMA 
            {
              Object RESULT =null;
		int listaexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int listaexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object listaexp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 
                        RESULT = (ArrayList<String>) listaexp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ejey",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ejey ::= Y DOS_PUNTOS DOS_PUNTOS DOUBLE IGUAL expresion FIN_DECLARACION PUNTO_COMA 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                        RESULT = Instrucciones.Arreglos.obtenerArray(exp.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ejey",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // titx ::= tX DOS_PUNTOS DOS_PUNTOS CHAR IGUAL expresion FIN_DECLARACION PUNTO_COMA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
                        RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("titx",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tity ::= tY DOS_PUNTOS DOS_PUNTOS CHAR IGUAL expresion FIN_DECLARACION PUNTO_COMA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
                        RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tity",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // lab ::= LABEL DOS_PUNTOS DOS_PUNTOS CHAR IGUAL CORCHETE_APERTURA lista_expresiones CORCHETE_CIERRE FIN_DECLARACION PUNTO_COMA 
            {
              Object RESULT =null;
		int listaexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int listaexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object listaexp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 
                        RESULT = (ArrayList<String>) listaexp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lab",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // lab ::= LABEL DOS_PUNTOS DOS_PUNTOS CHAR IGUAL expresion FIN_DECLARACION PUNTO_COMA 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                        RESULT = Instrucciones.Arreglos.obtenerArray(exp.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lab",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // vals ::= VALUES DOS_PUNTOS DOS_PUNTOS DOUBLE IGUAL CORCHETE_APERTURA lista_expresiones CORCHETE_CIERRE FIN_DECLARACION PUNTO_COMA 
            {
              Object RESULT =null;
		int listaexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int listaexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object listaexp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 
                        RESULT = (ArrayList<String>) listaexp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vals",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // vals ::= VALUES DOS_PUNTOS DOS_PUNTOS DOUBLE IGUAL expresion FIN_DECLARACION PUNTO_COMA 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                        RESULT = Instrucciones.Arreglos.obtenerArray(exp.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vals",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // print ::= CONSOLE DOS_PUNTOS DOS_PUNTOS IMPRIMIR IGUAL lista_expresiones FIN_DECLARACION PUNTO_COMA 
            {
              Object RESULT =null;
		int listaexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object listaexp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
                        resultado = Instrucciones.Impresión.instrucciónPrint((ArrayList<String>) listaexp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // print_array ::= CONSOLE DOS_PUNTOS DOS_PUNTOS COLUMN IGUAL expresion GUION MAYORQUE expresion FIN_DECLARACION PUNTO_COMA 
            {
              Object RESULT =null;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object titulo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int nombreArrayleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nombreArrayright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object nombreArray = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
                        resultado = Instrucciones.ImpresiónArreglos.imprimirArregloPorNombre(titulo.toString(), nombreArray.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print_array",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // print_array ::= CONSOLE DOS_PUNTOS DOS_PUNTOS COLUMN IGUAL expresion GUION MAYORQUE CORCHETE_APERTURA lista_expresiones CORCHETE_CIERRE FIN_DECLARACION PUNTO_COMA 
            {
              Object RESULT =null;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object titulo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int listaexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int listaexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object listaexp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 
                        resultado = Instrucciones.ImpresiónArreglos.imprimirArreglo(titulo.toString(), (ArrayList<String>) listaexp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print_array",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // operacion_aritmetica ::= operacion PARENTESIS_APERTURA expresion COMA expresion PARENTESIS_CIERRE 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                        RESULT = Instrucciones.Aritméticas.realizarOperación(op.toString(), izq.toString(), der.toString() ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // operacion_estadistica ::= estadística PARENTESIS_APERTURA expresion PARENTESIS_CIERRE 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                        ArrayList<String> valores = Instrucciones.Arreglos.obtenerArray(exp.toString());
                        RESULT = Instrucciones.Estadísticas.realizarOperaciónEstadística(op.toString(), valores);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_estadistica",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // operacion_estadistica ::= estadística PARENTESIS_APERTURA CORCHETE_APERTURA lista_expresiones CORCHETE_CIERRE PARENTESIS_CIERRE 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int listaexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object listaexp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
                        RESULT = Instrucciones.Estadísticas.realizarOperaciónEstadística(op.toString(), (ArrayList<String>) listaexp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_estadistica",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // estadística ::= MEDIA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estadística",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // estadística ::= MEDIANA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estadística",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // estadística ::= MODA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estadística",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // estadística ::= VARIANZA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estadística",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // estadística ::= MAX 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estadística",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // estadística ::= MIN 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estadística",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // variable ::= VAR DOS_PUNTOS tipo DOS_PUNTOS DOS_PUNTOS ID_VAR MENORQUE GUION expresion FIN_DECLARACION PUNTO_COMA 
            {
              Object RESULT =null;
		int tipoVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int tipoVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object tipoVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
                        Instrucciones.Variables.datosReporteVariables(id.toString(), (String) tipoVar, valor.toString());
                        System.out.println("Asignando valor a la variable " + id.toString() + ": " + valor.toString());
                        Instrucciones.Variables.asignarVariable(id.toString(), valor.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // operacion ::= SUMA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // operacion ::= RESTA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // operacion ::= MULTIPLICACION 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // operacion ::= DIVISION 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // operacion ::= MODULO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // array ::= ARRAY DOS_PUNTOS tipo DOS_PUNTOS DOS_PUNTOS ID_ARRAY MENORQUE GUION CORCHETE_APERTURA lista_expresiones CORCHETE_CIERRE FIN_DECLARACION PUNTO_COMA 
            {
              Object RESULT =null;
		int tipoArrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int tipoArrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Object tipoArr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int listaexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int listaexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object listaexp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
                        StringBuilder sb = new StringBuilder();
                        for (String expresion : (ArrayList<String>) listaexp) {
                            sb.append(expresion).append(", "); 
                        }
                        String expresiones = sb.toString();
                        if (expresiones.length() > 2) { 
                            expresiones = expresiones.substring(0, expresiones.length() - 2);
                        }
                        Instrucciones.Arreglos.datosReporteArreglo(id.toString(), (String) tipoArr, (ArrayList<String>) listaexp);
                        System.out.println("Asignando valores a la variable " + id.toString() + ": [" + expresiones + "]");
                        Instrucciones.Arreglos.asignarArray(id.toString(),(ArrayList<String>) listaexp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // tipo ::= DOUBLE 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String tip = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = tip.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // tipo ::= CHAR 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String tip = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = tip.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // lista_expresiones ::= expresion 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        ArrayList<String> listaExp = new ArrayList<>();
                        listaExp.add(val.toString());
                        RESULT = listaExp;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // lista_expresiones ::= lista_expresiones COMA expresion 
            {
              Object RESULT =null;
		int listaExpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaExpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object listaExp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        ((ArrayList<String>) listaExp).add(val.toString());
                        RESULT = listaExp;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresion ::= ENTERO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expresion ::= DECIMAL 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expresion ::= CADENA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expresion ::= ID_VAR 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Instrucciones.Variables.obtenerVariable(val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expresion ::= operacion_aritmetica 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expresion ::= operacion_estadistica 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expresion ::= ID_ARRAY 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
