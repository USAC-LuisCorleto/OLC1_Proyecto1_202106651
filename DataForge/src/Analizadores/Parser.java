
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import java.util.ArrayList;
import Reportes.ReporteErrores;
import Reportes.ErrorObj;
import java.util.HashMap;
import java.util.Map;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\123\000\002\002\004\000\002\002\005\000\002\003" +
    "\003\000\002\003\004\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\005\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\021\014\000\002\022" +
    "\014\000\002\023\014\000\002\024\014\000\002\034\003" +
    "\000\002\034\004\000\002\035\003\000\002\035\004\000" +
    "\002\036\003\000\002\036\004\000\002\037\003\000\002" +
    "\037\004\000\002\041\003\000\002\041\003\000\002\041" +
    "\003\000\002\040\003\000\002\040\003\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\042\003\000" +
    "\002\042\003\000\002\042\003\000\002\042\003\000\002" +
    "\042\003\000\002\043\003\000\002\043\003\000\002\025" +
    "\012\000\002\026\014\000\002\026\012\000\002\027\014" +
    "\000\002\027\012\000\002\030\012\000\002\031\012\000" +
    "\002\032\014\000\002\032\012\000\002\033\014\000\002" +
    "\033\012\000\002\014\012\000\002\015\015\000\002\015" +
    "\017\000\002\012\010\000\002\016\006\000\002\016\010" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\005\015\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\006\017" +
    "\000\002\006\015\000\002\007\003\000\002\007\003\000" +
    "\002\011\003\000\002\011\005\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\364\000\004\004\004\001\002\000\022\003\021\007" +
    "\031\012\027\020\013\032\026\033\010\034\011\035\030" +
    "\001\002\000\004\002\006\001\002\000\004\002\001\001" +
    "\002\000\024\003\ufffb\005\ufffb\007\ufffb\012\ufffb\020\ufffb" +
    "\032\ufffb\033\ufffb\034\ufffb\035\ufffb\001\002\000\004\055" +
    "\334\001\002\000\004\055\314\001\002\000\024\003\uffff" +
    "\005\uffff\007\uffff\012\uffff\020\uffff\032\uffff\033\uffff\034" +
    "\uffff\035\uffff\001\002\000\004\057\270\001\002\000\024" +
    "\003\ufffc\005\ufffc\007\ufffc\012\ufffc\020\ufffc\032\ufffc\033" +
    "\ufffc\034\ufffc\035\ufffc\001\002\000\024\003\ufffa\005\ufffa" +
    "\007\ufffa\012\ufffa\020\ufffa\032\ufffa\033\ufffa\034\ufffa\035" +
    "\ufffa\001\002\000\024\003\ufff6\005\ufff6\007\ufff6\012\ufff6" +
    "\020\ufff6\032\ufff6\033\ufff6\034\ufff6\035\ufff6\001\002\000" +
    "\024\003\021\005\267\007\031\012\027\020\013\032\026" +
    "\033\010\034\011\035\030\001\002\000\024\003\ufff5\005" +
    "\ufff5\007\ufff5\012\ufff5\020\ufff5\032\ufff5\033\ufff5\034\ufff5" +
    "\035\ufff5\001\002\000\004\006\264\001\002\000\024\003" +
    "\ufff4\005\ufff4\007\ufff4\012\ufff4\020\ufff4\032\ufff4\033\ufff4" +
    "\034\ufff4\035\ufff4\001\002\000\024\003\ufffd\005\ufffd\007" +
    "\ufffd\012\ufffd\020\ufffd\032\ufffd\033\ufffd\034\ufffd\035\ufffd" +
    "\001\002\000\024\003\ufff9\005\ufff9\007\ufff9\012\ufff9\020" +
    "\ufff9\032\ufff9\033\ufff9\034\ufff9\035\ufff9\001\002\000\024" +
    "\003\ufff7\005\ufff7\007\ufff7\012\ufff7\020\ufff7\032\ufff7\033" +
    "\ufff7\034\ufff7\035\ufff7\001\002\000\004\055\172\001\002" +
    "\000\004\057\153\001\002\000\004\055\111\001\002\000" +
    "\004\057\032\001\002\000\006\010\033\011\035\001\002" +
    "\000\004\057\uffb9\001\002\000\004\057\036\001\002\000" +
    "\004\057\uffb8\001\002\000\004\057\037\001\002\000\004" +
    "\050\040\001\002\000\004\061\041\001\002\000\004\063" +
    "\042\001\002\000\042\013\047\014\067\015\043\016\046" +
    "\017\051\022\064\023\055\024\066\025\061\026\063\027" +
    "\056\045\062\046\045\050\060\051\053\052\044\001\002" +
    "\000\004\055\uffbe\001\002\000\014\006\uffb3\054\uffb3\056" +
    "\uffb3\063\uffb3\064\uffb3\001\002\000\014\006\uffb4\054\uffb4" +
    "\056\uffb4\063\uffb4\064\uffb4\001\002\000\004\055\uffbd\001" +
    "\002\000\004\055\uffc0\001\002\000\004\006\107\001\002" +
    "\000\004\055\uffbc\001\002\000\004\055\075\001\002\000" +
    "\014\006\uffaf\054\uffaf\056\uffaf\063\uffaf\064\uffaf\001\002" +
    "\000\014\006\uffb0\054\uffb0\056\uffb0\063\uffb0\064\uffb0\001" +
    "\002\000\004\055\uffc6\001\002\000\004\055\uffc2\001\002" +
    "\000\014\006\uffb1\054\uffb1\056\uffb1\063\uffb1\064\uffb1\001" +
    "\002\000\014\006\uffb2\054\uffb2\056\uffb2\063\uffb2\064\uffb2" +
    "\001\002\000\004\055\uffc4\001\002\000\014\006\uffb5\054" +
    "\uffb5\056\uffb5\063\uffb5\064\uffb5\001\002\000\004\055\uffc3" +
    "\001\002\000\004\055\uffc7\001\002\000\004\055\070\001" +
    "\002\000\004\055\uffc5\001\002\000\004\055\uffbf\001\002" +
    "\000\042\013\047\014\067\015\043\016\046\017\051\022" +
    "\064\023\055\024\066\025\061\026\063\027\056\045\062" +
    "\046\045\050\060\051\053\052\044\001\002\000\004\064" +
    "\072\001\002\000\042\013\047\014\067\015\043\016\046" +
    "\017\051\022\064\023\055\024\066\025\061\026\063\027" +
    "\056\045\062\046\045\050\060\051\053\052\044\001\002" +
    "\000\004\056\074\001\002\000\014\006\uffca\054\uffca\056" +
    "\uffca\063\uffca\064\uffca\001\002\000\044\013\047\014\067" +
    "\015\043\016\046\017\051\022\064\023\055\024\066\025" +
    "\061\026\063\027\056\045\062\046\045\050\060\051\053" +
    "\052\044\053\077\001\002\000\004\056\106\001\002\000" +
    "\042\013\047\014\067\015\043\016\046\017\051\022\064" +
    "\023\055\024\066\025\061\026\063\027\056\045\062\046" +
    "\045\050\060\051\053\052\044\001\002\000\010\006\uffb7" +
    "\054\uffb7\064\uffb7\001\002\000\006\054\103\064\102\001" +
    "\002\000\042\013\047\014\067\015\043\016\046\017\051" +
    "\022\064\023\055\024\066\025\061\026\063\027\056\045" +
    "\062\046\045\050\060\051\053\052\044\001\002\000\004" +
    "\056\104\001\002\000\014\006\uffc8\054\uffc8\056\uffc8\063" +
    "\uffc8\064\uffc8\001\002\000\010\006\uffb6\054\uffb6\064\uffb6" +
    "\001\002\000\014\006\uffc9\054\uffc9\056\uffc9\063\uffc9\064" +
    "\uffc9\001\002\000\004\060\110\001\002\000\024\003\uffc1" +
    "\005\uffc1\007\uffc1\012\uffc1\020\uffc1\032\uffc1\033\uffc1\034" +
    "\uffc1\035\uffc1\001\002\000\006\036\116\044\112\001\002" +
    "\000\004\057\137\001\002\000\010\031\uffda\036\uffda\044" +
    "\uffda\001\002\000\010\031\130\036\116\044\112\001\002" +
    "\000\010\031\uffe9\036\uffe9\044\uffe9\001\002\000\004\057" +
    "\120\001\002\000\010\031\uffd9\036\uffd9\044\uffd9\001\002" +
    "\000\004\057\121\001\002\000\004\011\122\001\002\000" +
    "\004\065\123\001\002\000\042\013\047\014\067\015\043" +
    "\016\046\017\051\022\064\023\055\024\066\025\061\026" +
    "\063\027\056\045\062\046\045\050\060\051\053\052\044" +
    "\001\002\000\004\006\125\001\002\000\004\060\126\001" +
    "\002\000\022\031\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8" +
    "\042\uffd8\043\uffd8\044\uffd8\001\002\000\010\031\uffe8\036" +
    "\uffe8\044\uffe8\001\002\000\004\035\131\001\002\000\004" +
    "\006\132\001\002\000\004\060\133\001\002\000\004\056" +
    "\134\001\002\000\004\006\135\001\002\000\004\060\136" +
    "\001\002\000\024\003\ufff0\005\ufff0\007\ufff0\012\ufff0\020" +
    "\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0\001\002\000\004" +
    "\057\140\001\002\000\004\010\141\001\002\000\004\065" +
    "\142\001\002\000\044\013\047\014\067\015\043\016\046" +
    "\017\051\022\064\023\055\024\066\025\061\026\063\027" +
    "\056\045\062\046\045\050\060\051\053\052\044\053\144" +
    "\001\002\000\004\006\151\001\002\000\042\013\047\014" +
    "\067\015\043\016\046\017\051\022\064\023\055\024\066" +
    "\025\061\026\063\027\056\045\062\046\045\050\060\051" +
    "\053\052\044\001\002\000\006\054\146\064\102\001\002" +
    "\000\004\006\147\001\002\000\004\060\150\001\002\000" +
    "\012\031\uffcf\036\uffcf\043\uffcf\044\uffcf\001\002\000\004" +
    "\060\152\001\002\000\012\031\uffce\036\uffce\043\uffce\044" +
    "\uffce\001\002\000\006\010\033\011\035\001\002\000\004" +
    "\057\155\001\002\000\004\057\156\001\002\000\004\051" +
    "\157\001\002\000\004\061\160\001\002\000\004\063\161" +
    "\001\002\000\044\013\047\014\067\015\043\016\046\017" +
    "\051\022\064\023\055\024\066\025\061\026\063\027\056" +
    "\045\062\046\045\050\060\051\053\052\044\053\163\001" +
    "\002\000\004\006\170\001\002\000\042\013\047\014\067" +
    "\015\043\016\046\017\051\022\064\023\055\024\066\025" +
    "\061\026\063\027\056\045\062\046\045\050\060\051\053" +
    "\052\044\001\002\000\006\054\165\064\102\001\002\000" +
    "\004\006\166\001\002\000\004\060\167\001\002\000\024" +
    "\003\uffbb\005\uffbb\007\uffbb\012\uffbb\020\uffbb\032\uffbb\033" +
    "\uffbb\034\uffbb\035\uffbb\001\002\000\004\060\171\001\002" +
    "\000\024\003\uffba\005\uffba\007\uffba\012\uffba\020\uffba\032" +
    "\uffba\033\uffba\034\uffba\035\uffba\001\002\000\014\036\116" +
    "\037\175\040\174\041\202\042\201\001\002\000\016\031" +
    "\uffef\036\uffef\037\uffef\040\uffef\041\uffef\042\uffef\001\002" +
    "\000\004\057\250\001\002\000\004\057\234\001\002\000" +
    "\016\031\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4" +
    "\001\002\000\016\031\uffe2\036\uffe2\037\uffe2\040\uffe2\041" +
    "\uffe2\042\uffe2\001\002\000\016\031\uffe3\036\uffe3\037\uffe3" +
    "\040\uffe3\041\uffe3\042\uffe3\001\002\000\004\057\225\001" +
    "\002\000\004\057\216\001\002\000\016\031\207\036\116" +
    "\037\175\040\174\041\202\042\201\001\002\000\016\031" +
    "\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\001\002" +
    "\000\016\031\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\042" +
    "\uffe1\001\002\000\016\031\uffee\036\uffee\037\uffee\040\uffee" +
    "\041\uffee\042\uffee\001\002\000\004\032\210\001\002\000" +
    "\004\006\211\001\002\000\004\060\212\001\002\000\004" +
    "\056\213\001\002\000\004\006\214\001\002\000\004\060" +
    "\215\001\002\000\024\003\ufff3\005\ufff3\007\ufff3\012\ufff3" +
    "\020\ufff3\032\ufff3\033\ufff3\034\ufff3\035\ufff3\001\002\000" +
    "\004\057\217\001\002\000\004\011\220\001\002\000\004" +
    "\065\221\001\002\000\042\013\047\014\067\015\043\016" +
    "\046\017\051\022\064\023\055\024\066\025\061\026\063" +
    "\027\056\045\062\046\045\050\060\051\053\052\044\001" +
    "\002\000\004\006\223\001\002\000\004\060\224\001\002" +
    "\000\016\031\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042" +
    "\uffd3\001\002\000\004\057\226\001\002\000\004\011\227" +
    "\001\002\000\004\065\230\001\002\000\042\013\047\014" +
    "\067\015\043\016\046\017\051\022\064\023\055\024\066" +
    "\025\061\026\063\027\056\045\062\046\045\050\060\051" +
    "\053\052\044\001\002\000\004\006\232\001\002\000\004" +
    "\060\233\001\002\000\016\031\uffd2\036\uffd2\037\uffd2\040" +
    "\uffd2\041\uffd2\042\uffd2\001\002\000\004\057\235\001\002" +
    "\000\004\011\236\001\002\000\004\065\237\001\002\000" +
    "\044\013\047\014\067\015\043\016\046\017\051\022\064" +
    "\023\055\024\066\025\061\026\063\027\056\045\062\046" +
    "\045\050\060\051\053\052\044\053\241\001\002\000\004" +
    "\006\246\001\002\000\042\013\047\014\067\015\043\016" +
    "\046\017\051\022\064\023\055\024\066\025\061\026\063" +
    "\027\056\045\062\046\045\050\060\051\053\052\044\001" +
    "\002\000\006\054\243\064\102\001\002\000\004\006\244" +
    "\001\002\000\004\060\245\001\002\000\016\031\uffd7\036" +
    "\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\001\002\000\004" +
    "\060\247\001\002\000\016\031\uffd6\036\uffd6\037\uffd6\040" +
    "\uffd6\041\uffd6\042\uffd6\001\002\000\004\057\251\001\002" +
    "\000\004\010\252\001\002\000\004\065\253\001\002\000" +
    "\044\013\047\014\067\015\043\016\046\017\051\022\064" +
    "\023\055\024\066\025\061\026\063\027\056\045\062\046" +
    "\045\050\060\051\053\052\044\053\255\001\002\000\004" +
    "\006\262\001\002\000\042\013\047\014\067\015\043\016" +
    "\046\017\051\022\064\023\055\024\066\025\061\026\063" +
    "\027\056\045\062\046\045\050\060\051\053\052\044\001" +
    "\002\000\006\054\257\064\102\001\002\000\004\006\260" +
    "\001\002\000\004\060\261\001\002\000\016\031\uffd5\036" +
    "\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\001\002\000\004" +
    "\060\263\001\002\000\016\031\uffd4\036\uffd4\037\uffd4\040" +
    "\uffd4\041\uffd4\042\uffd4\001\002\000\004\060\265\001\002" +
    "\000\024\003\ufff8\005\ufff8\007\ufff8\012\ufff8\020\ufff8\032" +
    "\ufff8\033\ufff8\034\ufff8\035\ufff8\001\002\000\024\003\ufffe" +
    "\005\ufffe\007\ufffe\012\ufffe\020\ufffe\032\ufffe\033\ufffe\034" +
    "\ufffe\035\ufffe\001\002\000\004\002\000\001\002\000\004" +
    "\057\271\001\002\000\006\021\273\030\272\001\002\000" +
    "\004\065\300\001\002\000\004\065\274\001\002\000\042" +
    "\013\047\014\067\015\043\016\046\017\051\022\064\023" +
    "\055\024\066\025\061\026\063\027\056\045\062\046\045" +
    "\050\060\051\053\052\044\001\002\000\006\006\276\064" +
    "\102\001\002\000\004\060\277\001\002\000\024\003\uffcd" +
    "\005\uffcd\007\uffcd\012\uffcd\020\uffcd\032\uffcd\033\uffcd\034" +
    "\uffcd\035\uffcd\001\002\000\042\013\047\014\067\015\043" +
    "\016\046\017\051\022\064\023\055\024\066\025\061\026" +
    "\063\027\056\045\062\046\045\050\060\051\053\052\044" +
    "\001\002\000\004\063\302\001\002\000\004\062\303\001" +
    "\002\000\044\013\047\014\067\015\043\016\046\017\051" +
    "\022\064\023\055\024\066\025\061\026\063\027\056\045" +
    "\062\046\045\050\060\051\053\052\044\053\305\001\002" +
    "\000\004\006\312\001\002\000\042\013\047\014\067\015" +
    "\043\016\046\017\051\022\064\023\055\024\066\025\061" +
    "\026\063\027\056\045\062\046\045\050\060\051\053\052" +
    "\044\001\002\000\006\054\307\064\102\001\002\000\004" +
    "\006\310\001\002\000\004\060\311\001\002\000\024\003" +
    "\uffcb\005\uffcb\007\uffcb\012\uffcb\020\uffcb\032\uffcb\033\uffcb" +
    "\034\uffcb\035\uffcb\001\002\000\004\060\313\001\002\000" +
    "\024\003\uffcc\005\uffcc\007\uffcc\012\uffcc\020\uffcc\032\uffcc" +
    "\033\uffcc\034\uffcc\035\uffcc\001\002\000\014\036\116\037" +
    "\175\040\174\041\202\042\201\001\002\000\016\031\uffdf" +
    "\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\001\002\000" +
    "\016\031\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd" +
    "\001\002\000\016\031\uffde\036\uffde\037\uffde\040\uffde\041" +
    "\uffde\042\uffde\001\002\000\016\031\325\036\116\037\175" +
    "\040\174\041\202\042\201\001\002\000\016\031\uffeb\036" +
    "\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb\001\002\000\016" +
    "\031\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\001" +
    "\002\000\016\031\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc" +
    "\042\uffdc\001\002\000\016\031\uffea\036\uffea\037\uffea\040" +
    "\uffea\041\uffea\042\uffea\001\002\000\004\034\326\001\002" +
    "\000\004\006\327\001\002\000\004\060\330\001\002\000" +
    "\004\056\331\001\002\000\004\006\332\001\002\000\004" +
    "\060\333\001\002\000\024\003\ufff1\005\ufff1\007\ufff1\012" +
    "\ufff1\020\ufff1\032\ufff1\033\ufff1\034\ufff1\035\ufff1\001\002" +
    "\000\010\036\116\043\336\044\112\001\002\000\012\031" +
    "\uffe7\036\uffe7\043\uffe7\044\uffe7\001\002\000\004\057\353" +
    "\001\002\000\012\031\uffe6\036\uffe6\043\uffe6\044\uffe6\001" +
    "\002\000\012\031\344\036\116\043\336\044\112\001\002" +
    "\000\012\031\uffed\036\uffed\043\uffed\044\uffed\001\002\000" +
    "\012\031\uffe5\036\uffe5\043\uffe5\044\uffe5\001\002\000\012" +
    "\031\uffec\036\uffec\043\uffec\044\uffec\001\002\000\004\033" +
    "\345\001\002\000\004\006\346\001\002\000\004\060\347" +
    "\001\002\000\004\056\350\001\002\000\004\006\351\001" +
    "\002\000\004\060\352\001\002\000\024\003\ufff2\005\ufff2" +
    "\007\ufff2\012\ufff2\020\ufff2\032\ufff2\033\ufff2\034\ufff2\035" +
    "\ufff2\001\002\000\004\057\354\001\002\000\004\011\355" +
    "\001\002\000\004\065\356\001\002\000\044\013\047\014" +
    "\067\015\043\016\046\017\051\022\064\023\055\024\066" +
    "\025\061\026\063\027\056\045\062\046\045\050\060\051" +
    "\053\052\044\053\360\001\002\000\004\006\365\001\002" +
    "\000\042\013\047\014\067\015\043\016\046\017\051\022" +
    "\064\023\055\024\066\025\061\026\063\027\056\045\062" +
    "\046\045\050\060\051\053\052\044\001\002\000\006\054" +
    "\362\064\102\001\002\000\004\006\363\001\002\000\004" +
    "\060\364\001\002\000\012\031\uffd1\036\uffd1\043\uffd1\044" +
    "\uffd1\001\002\000\004\060\366\001\002\000\012\031\uffd0" +
    "\036\uffd0\043\uffd0\044\uffd0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\364\000\004\002\004\001\001\000\030\003\016\004" +
    "\011\005\022\006\013\014\006\015\014\020\023\021\024" +
    "\022\015\023\017\024\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\004\265" +
    "\005\022\006\013\014\006\015\014\020\023\021\024\022" +
    "\015\023\017\024\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\010\047\012\056\013\064\016\053" +
    "\017\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\010" +
    "\070\012\056\013\064\016\053\017\051\001\001\000\002" +
    "\001\001\000\014\010\072\012\056\013\064\016\053\017" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\010\075\012\056\013\064\016\053\017\051\001\001\000" +
    "\002\001\001\000\016\010\077\011\100\012\056\013\064" +
    "\016\053\017\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\010\104\012\056\013\064\016\053\017\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\025\112\033\116\037\113\043\114\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\025\112\033\116" +
    "\043\126\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\010\123\012\056\013\064\016\053\017" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\010\142\012\056" +
    "\013\064\016\053\017\051\001\001\000\002\001\001\000" +
    "\016\010\077\011\144\012\056\013\064\016\053\017\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\153\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\010\161\012\056\013\064\016\053\017\051\001" +
    "\001\000\002\001\001\000\016\010\077\011\163\012\056" +
    "\013\064\016\053\017\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\025\175\026\177\027" +
    "\176\030\204\031\203\034\202\040\172\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\025\175\026\177\027\176\030" +
    "\204\031\203\040\205\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\010\221\012\056" +
    "\013\064\016\053\017\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\010\230\012\056\013" +
    "\064\016\053\017\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\010\237\012\056\013\064" +
    "\016\053\017\051\001\001\000\002\001\001\000\016\010" +
    "\077\011\241\012\056\013\064\016\053\017\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\010" +
    "\253\012\056\013\064\016\053\017\051\001\001\000\002" +
    "\001\001\000\016\010\077\011\255\012\056\013\064\016" +
    "\053\017\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\010\077" +
    "\011\274\012\056\013\064\016\053\017\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\010\300\012\056\013\064\016\053\017\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\010\303\012\056" +
    "\013\064\016\053\017\051\001\001\000\002\001\001\000" +
    "\016\010\077\011\305\012\056\013\064\016\053\017\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\025\314\026\316\027\315\030\322\031\321\036" +
    "\317\042\320\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\025\314\026\316\027\315\030" +
    "\322\031\321\042\323\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\025\334\032\336\033\341\035\337\041\340\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\025\334\032\336\033\341\041\342\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\010\356\012\056\013\064\016\053\017\051\001\001\000" +
    "\002\001\001\000\016\010\077\011\360\012\056\013\064" +
    "\016\053\017\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private String tituloGlobal;
    private ArrayList<String> ejexGlobal;
    private ArrayList<String> ejeyGlobal;
    private String titxGlobal;
    private String tityGlobal;
    private ArrayList<String> labGlobal;
    private ArrayList<String> valsGlobal;
    private ArrayList<String> ejexGlobalL;
    private ArrayList<String> ejeyGlobalL;
    private String titxGlobalL;
    private String tityGlobalL;
    private ArrayList<String> valsGlobalH;
    public static String resultado = ""; 

    public void syntax_error(Symbol s)
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
            ReporteErrores.TablaErroresSintácticos.add(new ErrorObj("Sintáctico", "El caracter: '" + s.value.toString() + "' no cumple las reglas del lenguaje.", Integer.toString(s.right), Integer.toString(s.left))); 
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {

  
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= INICIO_CODIGO lista_instrucciones FIN_CODIGO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lista_instrucciones ::= instruccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instrucciones",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lista_instrucciones ::= lista_instrucciones instruccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instrucciones",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= array 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= print 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= print_array 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= graficar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= error FIN_DECLARACION PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // graficar ::= graficaB 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficar",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // graficar ::= graficaP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficar",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // graficar ::= graficaL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficar",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // graficar ::= graficaH 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficar",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // graficaB ::= GBARRAS PARENTESIS_APERTURA lista_sentenciasB EJECUTAR GBARRAS FIN_DECLARACION PUNTO_COMA PARENTESIS_CIERRE FIN_DECLARACION PUNTO_COMA 
            {
              Object RESULT =null;
		int graficaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int graficaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String grafica = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		
                        Instrucciones.GráficaBarras.generarGráfica(grafica.toString(), tituloGlobal, ejexGlobal, ejeyGlobal, titxGlobal, tityGlobal); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficaB",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // graficaP ::= GPIE PARENTESIS_APERTURA lista_sentenciasP EJECUTAR GPIE FIN_DECLARACION PUNTO_COMA PARENTESIS_CIERRE FIN_DECLARACION PUNTO_COMA 
            {
              Object RESULT =null;
		int graficaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int graficaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String grafica = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		
                        Instrucciones.GráficaPie.generarGráfica(grafica.toString(), labGlobal, valsGlobal, tituloGlobal); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficaP",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // graficaL ::= GLINEAS PARENTESIS_APERTURA lista_sentenciasL EJECUTAR GLINEAS FIN_DECLARACION PUNTO_COMA PARENTESIS_CIERRE FIN_DECLARACION PUNTO_COMA 
            {
              Object RESULT =null;
		int graficaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int graficaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String grafica = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		
                        Instrucciones.GráficaLíneas.generarGráfica(grafica.toString(), tituloGlobal, ejexGlobalL, ejeyGlobalL, titxGlobalL, tityGlobalL); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficaL",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // graficaH ::= HISTOGRAMA PARENTESIS_APERTURA lista_sentenciasH EJECUTAR HISTOGRAMA FIN_DECLARACION PUNTO_COMA PARENTESIS_CIERRE FIN_DECLARACION PUNTO_COMA 
            {
              Object RESULT =null;
		int graficaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int graficaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String grafica = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		
                        Instrucciones.Histograma.generarGráfica(grafica.toString(), tituloGlobal, valsGlobalH); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficaH",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // lista_sentenciasB ::= sentenciaB 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        ArrayList<String> listaSenB = new ArrayList<>();
                        listaSenB.add(val.toString());
                        RESULT = listaSenB;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_sentenciasB",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // lista_sentenciasB ::= lista_sentenciasB sentenciaB 
            {
              Object RESULT =null;
		int listaSenBleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaSenBright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object listaSenB = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        ((ArrayList<String>) listaSenB).add(val.toString());
                        RESULT = listaSenB;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_sentenciasB",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // lista_sentenciasP ::= sentenciaP 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        ArrayList<String> listaSenP = new ArrayList<>();
                        listaSenP.add(val.toString());
                        RESULT = listaSenP;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_sentenciasP",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // lista_sentenciasP ::= lista_sentenciasP sentenciaP 
            {
              Object RESULT =null;
		int listaSenPleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaSenPright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object listaSenP = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        ((ArrayList<String>) listaSenP).add(val.toString());
                        RESULT = listaSenP;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_sentenciasP",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // lista_sentenciasL ::= sentenciaL 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        ArrayList<String> listaSenL = new ArrayList<>();
                        listaSenL.add(val.toString());
                        RESULT = listaSenL;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_sentenciasL",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // lista_sentenciasL ::= lista_sentenciasL sentenciaL 
            {
              Object RESULT =null;
		int listaSenLleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaSenLright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object listaSenL = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        ((ArrayList<String>) listaSenL).add(val.toString());
                        RESULT = listaSenL;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_sentenciasL",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // lista_sentenciasH ::= sentenciaH 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        ArrayList<String> listaSenH = new ArrayList<>();
                        listaSenH.add(val.toString());
                        RESULT = listaSenH;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_sentenciasH",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // lista_sentenciasH ::= lista_sentenciasH sentenciaH 
            {
              Object RESULT =null;
		int listaSenHleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaSenHright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object listaSenH = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        ((ArrayList<String>) listaSenH).add(val.toString());
                        RESULT = listaSenH;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_sentenciasH",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sentenciaP ::= titulo 
            {
              Object RESULT =null;
		int titleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int titright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tit = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 tituloGlobal = tit.toString(); RESULT = tituloGlobal; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaP",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sentenciaP ::= lab 
            {
              Object RESULT =null;
		int lableft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int labright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lab = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 labGlobal = (ArrayList<String>) lab; RESULT = labGlobal; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaP",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sentenciaP ::= vals 
            {
              Object RESULT =null;
		int valsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object vals = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 valsGlobal = (ArrayList<String>) vals; RESULT = valsGlobal; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaP",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sentenciaB ::= titulo 
            {
              Object RESULT =null;
		int titleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int titright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tit = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 tituloGlobal = tit.toString(); RESULT = tituloGlobal; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaB",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sentenciaB ::= ejex 
            {
              Object RESULT =null;
		int ejexleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ejexright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ejex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ejexGlobal = (ArrayList<String>) ejex; RESULT = ejexGlobal; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaB",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sentenciaB ::= ejey 
            {
              Object RESULT =null;
		int ejeyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ejeyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ejey = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ejeyGlobal = (ArrayList<String>) ejey; RESULT = ejeyGlobal; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaB",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sentenciaB ::= titx 
            {
              Object RESULT =null;
		int titxleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int titxright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object titx = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 titxGlobal = titx.toString(); RESULT = titxGlobal; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaB",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sentenciaB ::= tity 
            {
              Object RESULT =null;
		int tityleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tityright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tity = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 tityGlobal = tity.toString(); RESULT = tityGlobal; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaB",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sentenciaL ::= titulo 
            {
              Object RESULT =null;
		int titleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int titright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tit = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 tituloGlobal = tit.toString(); RESULT = tituloGlobal; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaL",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sentenciaL ::= ejex 
            {
              Object RESULT =null;
		int ejexleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ejexright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ejex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ejexGlobalL = (ArrayList<String>) ejex; RESULT = ejexGlobalL; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaL",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sentenciaL ::= ejey 
            {
              Object RESULT =null;
		int ejeyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ejeyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ejey = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ejeyGlobalL = (ArrayList<String>) ejey; RESULT = ejeyGlobalL; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaL",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sentenciaL ::= titx 
            {
              Object RESULT =null;
		int titxleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int titxright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object titx = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 titxGlobalL = titx.toString(); RESULT = titxGlobalL; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaL",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // sentenciaL ::= tity 
            {
              Object RESULT =null;
		int tityleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tityright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tity = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 tityGlobalL = tity.toString(); RESULT = tityGlobalL; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaL",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sentenciaH ::= titulo 
            {
              Object RESULT =null;
		int titleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int titright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tit = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 tituloGlobal = tit.toString(); RESULT = tituloGlobal; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaH",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // sentenciaH ::= vals 
            {
              Object RESULT =null;
		int valsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object vals = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 valsGlobalH = (ArrayList<String>) vals; RESULT = valsGlobalH; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaH",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // titulo ::= GTITULO DOS_PUNTOS DOS_PUNTOS CHAR IGUAL expresion FIN_DECLARACION PUNTO_COMA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
                        RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("titulo",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ejex ::= X DOS_PUNTOS DOS_PUNTOS CHAR IGUAL CORCHETE_APERTURA lista_expresiones CORCHETE_CIERRE FIN_DECLARACION PUNTO_COMA 
            {
              Object RESULT =null;
		int listaexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int listaexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object listaexp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 
                        RESULT = (ArrayList<String>) listaexp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ejex",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ejex ::= X DOS_PUNTOS DOS_PUNTOS CHAR IGUAL expresion FIN_DECLARACION PUNTO_COMA 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                        RESULT = ((ArrayList<String>) exp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ejex",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ejey ::= Y DOS_PUNTOS DOS_PUNTOS DOUBLE IGUAL CORCHETE_APERTURA lista_expresiones CORCHETE_CIERRE FIN_DECLARACION PUNTO_COMA 
            {
              Object RESULT =null;
		int listaexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int listaexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object listaexp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 
                        RESULT = (ArrayList<String>) listaexp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ejey",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ejey ::= Y DOS_PUNTOS DOS_PUNTOS DOUBLE IGUAL expresion FIN_DECLARACION PUNTO_COMA 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                        RESULT = ((ArrayList<String>) exp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ejey",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // titx ::= tX DOS_PUNTOS DOS_PUNTOS CHAR IGUAL expresion FIN_DECLARACION PUNTO_COMA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
                        RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("titx",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // tity ::= tY DOS_PUNTOS DOS_PUNTOS CHAR IGUAL expresion FIN_DECLARACION PUNTO_COMA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
                        RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tity",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // lab ::= LABEL DOS_PUNTOS DOS_PUNTOS CHAR IGUAL CORCHETE_APERTURA lista_expresiones CORCHETE_CIERRE FIN_DECLARACION PUNTO_COMA 
            {
              Object RESULT =null;
		int listaexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int listaexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object listaexp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 
                        RESULT = (ArrayList<String>) listaexp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lab",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // lab ::= LABEL DOS_PUNTOS DOS_PUNTOS CHAR IGUAL expresion FIN_DECLARACION PUNTO_COMA 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                        RESULT = (ArrayList<String>) exp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lab",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // vals ::= VALUES DOS_PUNTOS DOS_PUNTOS DOUBLE IGUAL CORCHETE_APERTURA lista_expresiones CORCHETE_CIERRE FIN_DECLARACION PUNTO_COMA 
            {
              Object RESULT =null;
		int listaexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int listaexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object listaexp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 
                        RESULT = (ArrayList<String>) listaexp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vals",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // vals ::= VALUES DOS_PUNTOS DOS_PUNTOS DOUBLE IGUAL expresion FIN_DECLARACION PUNTO_COMA 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                        RESULT = (ArrayList<String>) exp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vals",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // print ::= CONSOLE DOS_PUNTOS DOS_PUNTOS IMPRIMIR IGUAL lista_expresiones FIN_DECLARACION PUNTO_COMA 
            {
              Object RESULT =null;
		int listaexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object listaexp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
                        resultado = Instrucciones.Impresión.instrucciónPrint((ArrayList<String>) listaexp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // print_array ::= CONSOLE DOS_PUNTOS DOS_PUNTOS COLUMN IGUAL expresion GUION MAYORQUE expresion FIN_DECLARACION PUNTO_COMA 
            {
              Object RESULT =null;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object titulo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int nombreArrayleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nombreArrayright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object nombreArray = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
                        resultado = Instrucciones.ImpresiónArreglos.imprimirArreglo(titulo.toString(), (ArrayList<String>) nombreArray); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print_array",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // print_array ::= CONSOLE DOS_PUNTOS DOS_PUNTOS COLUMN IGUAL expresion GUION MAYORQUE CORCHETE_APERTURA lista_expresiones CORCHETE_CIERRE FIN_DECLARACION PUNTO_COMA 
            {
              Object RESULT =null;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object titulo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int listaexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int listaexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object listaexp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 
                        resultado = Instrucciones.ImpresiónArreglos.imprimirArreglo(titulo.toString(), (ArrayList<String>) listaexp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print_array",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // operacion_aritmetica ::= operacion PARENTESIS_APERTURA expresion COMA expresion PARENTESIS_CIERRE 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                        RESULT = Instrucciones.Aritméticas.realizarOperación(op.toString(), izq.toString(), der.toString() ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // operacion_estadistica ::= estadística PARENTESIS_APERTURA expresion PARENTESIS_CIERRE 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                        RESULT = Instrucciones.Estadísticas.realizarOperaciónEstadística(op.toString(), (ArrayList<String>) exp);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_estadistica",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // operacion_estadistica ::= estadística PARENTESIS_APERTURA CORCHETE_APERTURA lista_expresiones CORCHETE_CIERRE PARENTESIS_CIERRE 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int listaexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object listaexp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
                        RESULT = Instrucciones.Estadísticas.realizarOperaciónEstadística(op.toString(), (ArrayList<String>) listaexp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_estadistica",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // estadística ::= MEDIA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estadística",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // estadística ::= MEDIANA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estadística",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // estadística ::= MODA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estadística",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // estadística ::= VARIANZA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estadística",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // estadística ::= MAX 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estadística",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // estadística ::= MIN 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estadística",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // variable ::= VAR DOS_PUNTOS tipo DOS_PUNTOS DOS_PUNTOS ID_VAR MENORQUE GUION expresion FIN_DECLARACION PUNTO_COMA 
            {
              Object RESULT =null;
		int tipoVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int tipoVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object tipoVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
                        Instrucciones.Variables.datosReporteVariables(id.toString(), (String) tipoVar, valor.toString(), Integer.toString(idleft), Integer.toString(idright));
                        System.out.println("Asignando valor a la variable " + id.toString() + ": " + valor.toString());
                        Instrucciones.Variables.asignarVariable(id.toString().toLowerCase(), valor.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // operacion ::= SUMA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // operacion ::= RESTA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // operacion ::= MULTIPLICACION 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // operacion ::= DIVISION 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // operacion ::= MODULO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // array ::= ARRAY DOS_PUNTOS tipo DOS_PUNTOS DOS_PUNTOS ID_ARRAY MENORQUE GUION CORCHETE_APERTURA lista_expresiones CORCHETE_CIERRE FIN_DECLARACION PUNTO_COMA 
            {
              Object RESULT =null;
		int tipoArrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int tipoArrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Object tipoArr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int listaexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int listaexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object listaexp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
                        StringBuilder sb = new StringBuilder();
                        for (String expresion : (ArrayList<String>) listaexp) {
                            sb.append(expresion).append(", "); 
                        }
                        String expresiones = sb.toString();
                        if (expresiones.length() > 2) { 
                            expresiones = expresiones.substring(0, expresiones.length() - 2);
                        }
                        Instrucciones.Arreglos.datosReporteArreglo(id.toString(), (String) tipoArr, (ArrayList<String>) listaexp, Integer.toString(idleft), Integer.toString(idright));
                        System.out.println("Asignando valores a la variable " + id.toString().toLowerCase() + ": [" + expresiones + "]");
                        Instrucciones.Arreglos.asignarArray(id.toString().toLowerCase(),(ArrayList<String>) listaexp ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // array ::= ARRAY DOS_PUNTOS tipo DOS_PUNTOS DOS_PUNTOS ID_ARRAY MENORQUE GUION expresion FIN_DECLARACION PUNTO_COMA 
            {
              Object RESULT =null;
		int tipoArrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int tipoArrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object tipoArr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                        Instrucciones.Arreglos.asignarArray(id.toString().toLowerCase(), (ArrayList<String>) exp); 
                        Instrucciones.Arreglos.datosReporteArreglo(id.toString(), (String) tipoArr, (ArrayList<String>) exp, Integer.toString(idleft), Integer.toString(idright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // tipo ::= DOUBLE 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String tip = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = tip.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // tipo ::= CHAR 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String tip = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = tip.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // lista_expresiones ::= expresion 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        ArrayList<String> listaExp = new ArrayList<>();
                        listaExp.add(val.toString());
                        RESULT = listaExp;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // lista_expresiones ::= lista_expresiones COMA expresion 
            {
              Object RESULT =null;
		int listaExpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaExpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object listaExp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        ((ArrayList<String>) listaExp).add(val.toString());
                        RESULT = listaExp;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresion ::= ENTERO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expresion ::= DECIMAL 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expresion ::= CADENA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expresion ::= ID_VAR 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Instrucciones.Variables.obtenerVariable(val.toString().toLowerCase()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expresion ::= operacion_aritmetica 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expresion ::= operacion_estadistica 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expresion ::= ID_ARRAY 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Instrucciones.Arreglos.obtenerArray(val.toString().toLowerCase()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
