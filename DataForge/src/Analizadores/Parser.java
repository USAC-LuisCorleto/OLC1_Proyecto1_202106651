
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import java.util.ArrayList;
import Reportes.ReporteErrores;
import Reportes.ErrorObj;
import java.util.HashMap;
import java.util.Map;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\113\000\002\002\004\000\002\002\005\000\002\003" +
    "\003\000\002\003\004\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\021\014\000\002\022\014\000\002\023\014\000\002\033" +
    "\003\000\002\033\004\000\002\034\003\000\002\034\004" +
    "\000\002\035\003\000\002\035\004\000\002\037\003\000" +
    "\002\037\003\000\002\037\003\000\002\036\003\000\002" +
    "\036\003\000\002\036\003\000\002\036\003\000\002\036" +
    "\003\000\002\040\003\000\002\040\003\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\024\012\000" +
    "\002\025\014\000\002\025\012\000\002\026\014\000\002" +
    "\026\012\000\002\027\012\000\002\030\012\000\002\031" +
    "\014\000\002\031\012\000\002\032\014\000\002\032\012" +
    "\000\002\014\012\000\002\015\015\000\002\015\017\000" +
    "\002\012\010\000\002\016\006\000\002\016\010\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\005\015" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\006\017\000\002" +
    "\007\003\000\002\007\003\000\002\011\003\000\002\011" +
    "\005\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\337\000\004\004\004\001\002\000\016\007\017\012" +
    "\011\020\022\032\012\033\016\034\025\001\002\000\004" +
    "\002\006\001\002\000\004\002\001\001\002\000\020\005" +
    "\ufffb\007\ufffb\012\ufffb\020\ufffb\032\ufffb\033\ufffb\034\ufffb" +
    "\001\002\000\020\005\ufff7\007\ufff7\012\ufff7\020\ufff7\032" +
    "\ufff7\033\ufff7\034\ufff7\001\002\000\004\056\326\001\002" +
    "\000\004\054\306\001\002\000\020\005\ufffd\007\ufffd\012" +
    "\ufffd\020\ufffd\032\ufffd\033\ufffd\034\ufffd\001\002\000\020" +
    "\005\ufff6\007\ufff6\012\ufff6\020\ufff6\032\ufff6\033\ufff6\034" +
    "\ufff6\001\002\000\020\005\uffff\007\uffff\012\uffff\020\uffff" +
    "\032\uffff\033\uffff\034\uffff\001\002\000\004\054\236\001" +
    "\002\000\004\056\222\001\002\000\020\005\ufffc\007\ufffc" +
    "\012\ufffc\020\ufffc\032\ufffc\033\ufffc\034\ufffc\001\002\000" +
    "\020\005\ufffa\007\ufffa\012\ufffa\020\ufffa\032\ufffa\033\ufffa" +
    "\034\ufffa\001\002\000\004\056\176\001\002\000\020\005" +
    "\ufff9\007\ufff9\012\ufff9\020\ufff9\032\ufff9\033\ufff9\034\ufff9" +
    "\001\002\000\020\005\ufff8\007\ufff8\012\ufff8\020\ufff8\032" +
    "\ufff8\033\ufff8\034\ufff8\001\002\000\004\054\031\001\002" +
    "\000\020\005\030\007\017\012\011\020\022\032\012\033" +
    "\016\034\025\001\002\000\020\005\ufffe\007\ufffe\012\ufffe" +
    "\020\ufffe\032\ufffe\033\ufffe\034\ufffe\001\002\000\004\002" +
    "\000\001\002\000\014\035\041\036\033\037\032\040\043" +
    "\041\042\001\002\000\004\056\162\001\002\000\004\056" +
    "\146\001\002\000\016\031\uffe4\035\uffe4\036\uffe4\037\uffe4" +
    "\040\uffe4\041\uffe4\001\002\000\016\031\uffe2\035\uffe2\036" +
    "\uffe2\037\uffe2\040\uffe2\041\uffe2\001\002\000\016\031\uffe3" +
    "\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\001\002\000" +
    "\016\031\137\035\041\036\033\037\032\040\043\041\042" +
    "\001\002\000\016\031\uffee\035\uffee\036\uffee\037\uffee\040" +
    "\uffee\041\uffee\001\002\000\004\056\127\001\002\000\004" +
    "\056\120\001\002\000\004\056\046\001\002\000\016\031" +
    "\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\001\002" +
    "\000\016\031\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041" +
    "\uffe1\001\002\000\004\056\047\001\002\000\004\011\050" +
    "\001\002\000\004\064\051\001\002\000\042\013\056\014" +
    "\076\015\052\016\055\017\060\022\073\023\065\024\075" +
    "\025\067\026\072\027\064\044\071\045\054\047\070\050" +
    "\062\051\053\001\002\000\004\054\uffc5\001\002\000\014" +
    "\006\uffbb\053\uffbb\055\uffbb\062\uffbb\063\uffbb\001\002\000" +
    "\014\006\uffbc\053\uffbc\055\uffbc\062\uffbc\063\uffbc\001\002" +
    "\000\004\054\uffc4\001\002\000\004\054\uffc7\001\002\000" +
    "\004\006\116\001\002\000\004\054\uffc3\001\002\000\004" +
    "\054\104\001\002\000\014\006\uffb7\053\uffb7\055\uffb7\062" +
    "\uffb7\063\uffb7\001\002\000\014\006\uffb8\053\uffb8\055\uffb8" +
    "\062\uffb8\063\uffb8\001\002\000\004\054\uffc9\001\002\000" +
    "\004\054\uffcd\001\002\000\014\006\uffb9\053\uffb9\055\uffb9" +
    "\062\uffb9\063\uffb9\001\002\000\004\054\uffcb\001\002\000" +
    "\014\006\uffba\053\uffba\055\uffba\062\uffba\063\uffba\001\002" +
    "\000\014\006\uffbd\053\uffbd\055\uffbd\062\uffbd\063\uffbd\001" +
    "\002\000\004\054\uffca\001\002\000\004\054\uffce\001\002" +
    "\000\004\054\077\001\002\000\004\054\uffcc\001\002\000" +
    "\004\054\uffc6\001\002\000\042\013\056\014\076\015\052" +
    "\016\055\017\060\022\073\023\065\024\075\025\067\026" +
    "\072\027\064\044\071\045\054\047\070\050\062\051\053" +
    "\001\002\000\004\063\101\001\002\000\042\013\056\014" +
    "\076\015\052\016\055\017\060\022\073\023\065\024\075" +
    "\025\067\026\072\027\064\044\071\045\054\047\070\050" +
    "\062\051\053\001\002\000\004\055\103\001\002\000\014" +
    "\006\uffd1\053\uffd1\055\uffd1\062\uffd1\063\uffd1\001\002\000" +
    "\044\013\056\014\076\015\052\016\055\017\060\022\073" +
    "\023\065\024\075\025\067\026\072\027\064\044\071\045" +
    "\054\047\070\050\062\051\053\052\106\001\002\000\004" +
    "\055\115\001\002\000\042\013\056\014\076\015\052\016" +
    "\055\017\060\022\073\023\065\024\075\025\067\026\072" +
    "\027\064\044\071\045\054\047\070\050\062\051\053\001" +
    "\002\000\010\006\uffbf\053\uffbf\063\uffbf\001\002\000\006" +
    "\053\112\063\111\001\002\000\042\013\056\014\076\015" +
    "\052\016\055\017\060\022\073\023\065\024\075\025\067" +
    "\026\072\027\064\044\071\045\054\047\070\050\062\051" +
    "\053\001\002\000\004\055\113\001\002\000\014\006\uffcf" +
    "\053\uffcf\055\uffcf\062\uffcf\063\uffcf\001\002\000\010\006" +
    "\uffbe\053\uffbe\063\uffbe\001\002\000\014\006\uffd0\053\uffd0" +
    "\055\uffd0\062\uffd0\063\uffd0\001\002\000\004\057\117\001" +
    "\002\000\016\031\uffda\035\uffda\036\uffda\037\uffda\040\uffda" +
    "\041\uffda\001\002\000\004\056\121\001\002\000\004\011" +
    "\122\001\002\000\004\064\123\001\002\000\042\013\056" +
    "\014\076\015\052\016\055\017\060\022\073\023\065\024" +
    "\075\025\067\026\072\027\064\044\071\045\054\047\070" +
    "\050\062\051\053\001\002\000\004\006\125\001\002\000" +
    "\004\057\126\001\002\000\016\031\uffd9\035\uffd9\036\uffd9" +
    "\037\uffd9\040\uffd9\041\uffd9\001\002\000\004\056\130\001" +
    "\002\000\004\011\131\001\002\000\004\064\132\001\002" +
    "\000\042\013\056\014\076\015\052\016\055\017\060\022" +
    "\073\023\065\024\075\025\067\026\072\027\064\044\071" +
    "\045\054\047\070\050\062\051\053\001\002\000\004\006" +
    "\134\001\002\000\004\057\135\001\002\000\022\031\uffdf" +
    "\035\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\043" +
    "\uffdf\001\002\000\016\031\uffed\035\uffed\036\uffed\037\uffed" +
    "\040\uffed\041\uffed\001\002\000\004\034\140\001\002\000" +
    "\004\006\141\001\002\000\004\057\142\001\002\000\004" +
    "\055\143\001\002\000\004\006\144\001\002\000\004\057" +
    "\145\001\002\000\020\005\ufff3\007\ufff3\012\ufff3\020\ufff3" +
    "\032\ufff3\033\ufff3\034\ufff3\001\002\000\004\056\147\001" +
    "\002\000\004\011\150\001\002\000\004\064\151\001\002" +
    "\000\044\013\056\014\076\015\052\016\055\017\060\022" +
    "\073\023\065\024\075\025\067\026\072\027\064\044\071" +
    "\045\054\047\070\050\062\051\053\052\153\001\002\000" +
    "\004\006\160\001\002\000\042\013\056\014\076\015\052" +
    "\016\055\017\060\022\073\023\065\024\075\025\067\026" +
    "\072\027\064\044\071\045\054\047\070\050\062\051\053" +
    "\001\002\000\006\053\155\063\111\001\002\000\004\006" +
    "\156\001\002\000\004\057\157\001\002\000\016\031\uffde" +
    "\035\uffde\036\uffde\037\uffde\040\uffde\041\uffde\001\002\000" +
    "\004\057\161\001\002\000\016\031\uffdd\035\uffdd\036\uffdd" +
    "\037\uffdd\040\uffdd\041\uffdd\001\002\000\004\056\163\001" +
    "\002\000\004\010\164\001\002\000\004\064\165\001\002" +
    "\000\044\013\056\014\076\015\052\016\055\017\060\022" +
    "\073\023\065\024\075\025\067\026\072\027\064\044\071" +
    "\045\054\047\070\050\062\051\053\052\167\001\002\000" +
    "\004\006\174\001\002\000\042\013\056\014\076\015\052" +
    "\016\055\017\060\022\073\023\065\024\075\025\067\026" +
    "\072\027\064\044\071\045\054\047\070\050\062\051\053" +
    "\001\002\000\006\053\171\063\111\001\002\000\004\006" +
    "\172\001\002\000\004\057\173\001\002\000\016\031\uffdc" +
    "\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\001\002\000" +
    "\004\057\175\001\002\000\016\031\uffdb\035\uffdb\036\uffdb" +
    "\037\uffdb\040\uffdb\041\uffdb\001\002\000\004\056\177\001" +
    "\002\000\006\021\201\030\200\001\002\000\004\064\206" +
    "\001\002\000\004\064\202\001\002\000\042\013\056\014" +
    "\076\015\052\016\055\017\060\022\073\023\065\024\075" +
    "\025\067\026\072\027\064\044\071\045\054\047\070\050" +
    "\062\051\053\001\002\000\006\006\204\063\111\001\002" +
    "\000\004\057\205\001\002\000\020\005\uffd4\007\uffd4\012" +
    "\uffd4\020\uffd4\032\uffd4\033\uffd4\034\uffd4\001\002\000\042" +
    "\013\056\014\076\015\052\016\055\017\060\022\073\023" +
    "\065\024\075\025\067\026\072\027\064\044\071\045\054" +
    "\047\070\050\062\051\053\001\002\000\004\062\210\001" +
    "\002\000\004\061\211\001\002\000\044\013\056\014\076" +
    "\015\052\016\055\017\060\022\073\023\065\024\075\025" +
    "\067\026\072\027\064\044\071\045\054\047\070\050\062" +
    "\051\053\052\213\001\002\000\004\006\220\001\002\000" +
    "\042\013\056\014\076\015\052\016\055\017\060\022\073" +
    "\023\065\024\075\025\067\026\072\027\064\044\071\045" +
    "\054\047\070\050\062\051\053\001\002\000\006\053\215" +
    "\063\111\001\002\000\004\006\216\001\002\000\004\057" +
    "\217\001\002\000\020\005\uffd2\007\uffd2\012\uffd2\020\uffd2" +
    "\032\uffd2\033\uffd2\034\uffd2\001\002\000\004\057\221\001" +
    "\002\000\020\005\uffd3\007\uffd3\012\uffd3\020\uffd3\032\uffd3" +
    "\033\uffd3\034\uffd3\001\002\000\006\010\223\011\225\001" +
    "\002\000\004\056\uffc1\001\002\000\004\056\226\001\002" +
    "\000\004\056\uffc0\001\002\000\004\056\227\001\002\000" +
    "\004\047\230\001\002\000\004\060\231\001\002\000\004" +
    "\062\232\001\002\000\042\013\056\014\076\015\052\016" +
    "\055\017\060\022\073\023\065\024\075\025\067\026\072" +
    "\027\064\044\071\045\054\047\070\050\062\051\053\001" +
    "\002\000\004\006\234\001\002\000\004\057\235\001\002" +
    "\000\020\005\uffc8\007\uffc8\012\uffc8\020\uffc8\032\uffc8\033" +
    "\uffc8\034\uffc8\001\002\000\010\035\041\042\241\043\237" +
    "\001\002\000\004\056\272\001\002\000\012\031\uffec\035" +
    "\uffec\042\uffec\043\uffec\001\002\000\004\056\256\001\002" +
    "\000\012\031\uffeb\035\uffeb\042\uffeb\043\uffeb\001\002\000" +
    "\012\031\247\035\041\042\241\043\237\001\002\000\012" +
    "\031\ufff0\035\ufff0\042\ufff0\043\ufff0\001\002\000\012\031" +
    "\uffea\035\uffea\042\uffea\043\uffea\001\002\000\012\031\uffef" +
    "\035\uffef\042\uffef\043\uffef\001\002\000\004\033\250\001" +
    "\002\000\004\006\251\001\002\000\004\057\252\001\002" +
    "\000\004\055\253\001\002\000\004\006\254\001\002\000" +
    "\004\057\255\001\002\000\020\005\ufff4\007\ufff4\012\ufff4" +
    "\020\ufff4\032\ufff4\033\ufff4\034\ufff4\001\002\000\004\056" +
    "\257\001\002\000\004\011\260\001\002\000\004\064\261" +
    "\001\002\000\044\013\056\014\076\015\052\016\055\017" +
    "\060\022\073\023\065\024\075\025\067\026\072\027\064" +
    "\044\071\045\054\047\070\050\062\051\053\052\263\001" +
    "\002\000\004\006\270\001\002\000\042\013\056\014\076" +
    "\015\052\016\055\017\060\022\073\023\065\024\075\025" +
    "\067\026\072\027\064\044\071\045\054\047\070\050\062" +
    "\051\053\001\002\000\006\053\265\063\111\001\002\000" +
    "\004\006\266\001\002\000\004\057\267\001\002\000\012" +
    "\031\uffd8\035\uffd8\042\uffd8\043\uffd8\001\002\000\004\057" +
    "\271\001\002\000\012\031\uffd7\035\uffd7\042\uffd7\043\uffd7" +
    "\001\002\000\004\056\273\001\002\000\004\010\274\001" +
    "\002\000\004\064\275\001\002\000\044\013\056\014\076" +
    "\015\052\016\055\017\060\022\073\023\065\024\075\025" +
    "\067\026\072\027\064\044\071\045\054\047\070\050\062" +
    "\051\053\052\277\001\002\000\004\006\304\001\002\000" +
    "\042\013\056\014\076\015\052\016\055\017\060\022\073" +
    "\023\065\024\075\025\067\026\072\027\064\044\071\045" +
    "\054\047\070\050\062\051\053\001\002\000\006\053\301" +
    "\063\111\001\002\000\004\006\302\001\002\000\004\057" +
    "\303\001\002\000\012\031\uffd6\035\uffd6\042\uffd6\043\uffd6" +
    "\001\002\000\004\057\305\001\002\000\012\031\uffd5\035" +
    "\uffd5\042\uffd5\043\uffd5\001\002\000\014\035\041\036\033" +
    "\037\032\040\043\041\042\001\002\000\016\031\ufff2\035" +
    "\ufff2\036\ufff2\037\ufff2\040\ufff2\041\ufff2\001\002\000\016" +
    "\031\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\001" +
    "\002\000\016\031\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7" +
    "\041\uffe7\001\002\000\016\031\uffe8\035\uffe8\036\uffe8\037" +
    "\uffe8\040\uffe8\041\uffe8\001\002\000\016\031\317\035\041" +
    "\036\033\037\032\040\043\041\042\001\002\000\016\031" +
    "\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\001\002" +
    "\000\016\031\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\041" +
    "\uffe6\001\002\000\016\031\ufff1\035\ufff1\036\ufff1\037\ufff1" +
    "\040\ufff1\041\ufff1\001\002\000\004\032\320\001\002\000" +
    "\004\006\321\001\002\000\004\057\322\001\002\000\004" +
    "\055\323\001\002\000\004\006\324\001\002\000\004\057" +
    "\325\001\002\000\020\005\ufff5\007\ufff5\012\ufff5\020\ufff5" +
    "\032\ufff5\033\ufff5\034\ufff5\001\002\000\006\010\223\011" +
    "\225\001\002\000\004\056\330\001\002\000\004\056\331" +
    "\001\002\000\004\050\332\001\002\000\004\060\333\001" +
    "\002\000\004\062\334\001\002\000\004\052\335\001\002" +
    "\000\042\013\056\014\076\015\052\016\055\017\060\022" +
    "\073\023\065\024\075\025\067\026\072\027\064\044\071" +
    "\045\054\047\070\050\062\051\053\001\002\000\006\053" +
    "\337\063\111\001\002\000\004\006\340\001\002\000\004" +
    "\057\341\001\002\000\020\005\uffc2\007\uffc2\012\uffc2\020" +
    "\uffc2\032\uffc2\033\uffc2\034\uffc2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\337\000\004\002\004\001\001\000\026\003\025\004" +
    "\014\005\012\006\017\014\006\015\020\020\022\021\023" +
    "\022\007\023\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\004\026" +
    "\005\012\006\017\014\006\015\020\020\022\021\023\022" +
    "\007\023\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\024\033\025\035\026\034\027\044\030\043\035" +
    "\036\040\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\024\033\025\035\026\034\027\044\030\043\040\135" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\010\056\012\065\013\073\016\062\017\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\010\077\012\065\013" +
    "\073\016\062\017\060\001\001\000\002\001\001\000\014" +
    "\010\101\012\065\013\073\016\062\017\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\010\104\012\065" +
    "\013\073\016\062\017\060\001\001\000\002\001\001\000" +
    "\016\010\106\011\107\012\065\013\073\016\062\017\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\010" +
    "\113\012\065\013\073\016\062\017\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\010\123\012" +
    "\065\013\073\016\062\017\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\010\132\012\065" +
    "\013\073\016\062\017\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\010\151\012\065\013\073\016\062\017\060\001\001" +
    "\000\002\001\001\000\016\010\106\011\153\012\065\013" +
    "\073\016\062\017\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\010\165\012\065\013\073\016" +
    "\062\017\060\001\001\000\002\001\001\000\016\010\106" +
    "\011\167\012\065\013\073\016\062\017\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\010\106\011\202\012\065\013\073\016\062\017" +
    "\060\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\010\206\012\065\013\073\016\062\017" +
    "\060\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\010\211\012\065\013\073\016\062\017\060\001\001\000" +
    "\002\001\001\000\016\010\106\011\213\012\065\013\073" +
    "\016\062\017\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\223\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\010\232\012\065\013\073\016\062\017\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\024\237\031\241\032\244\034\242\037\243\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\024\237\031\241\032\244\037\245" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\010\261\012\065\013\073\016\062\017" +
    "\060\001\001\000\002\001\001\000\016\010\106\011\263" +
    "\012\065\013\073\016\062\017\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\010\275\012\065" +
    "\013\073\016\062\017\060\001\001\000\002\001\001\000" +
    "\016\010\106\011\277\012\065\013\073\016\062\017\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\024\307\025\311\026\310\027\314\030\313\033" +
    "\312\036\306\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\024\307\025" +
    "\311\026\310\027\314\030\313\036\315\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\326\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\010\106\011\335\012\065\013\073" +
    "\016\062\017\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private String tituloGlobal;
    private ArrayList<String> ejexGlobal;
    private ArrayList<String> ejeyGlobal;
    private String titxGlobal;
    private String tityGlobal;
    private ArrayList<String> labGlobal;
    private ArrayList<String> valsGlobal;
    private ArrayList<String> ejexGlobalL;
    private ArrayList<String> ejeyGlobalL;
    private String titxGlobalL;
    private String tityGlobalL;
    public static String resultado = ""; 

    public void syntax_error(Symbol s)
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
            ReporteErrores.TablaErroresSintácticos.add(new ErrorObj("Sintáctico", "El caracter: '" + s.value.toString() + "' no cumple las reglas del lenguaje.", Integer.toString(s.right), Integer.toString(s.left))); 
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {

  
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= INICIO_CODIGO lista_instrucciones FIN_CODIGO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lista_instrucciones ::= instruccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instrucciones",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lista_instrucciones ::= lista_instrucciones instruccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instrucciones",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= array 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= print 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= print_array 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= graficar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // graficar ::= graficaB 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficar",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // graficar ::= graficaP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficar",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // graficar ::= graficaL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficar",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // graficaB ::= GBARRAS PARENTESIS_APERTURA lista_sentenciasB EJECUTAR GBARRAS FIN_DECLARACION PUNTO_COMA PARENTESIS_CIERRE FIN_DECLARACION PUNTO_COMA 
            {
              Object RESULT =null;
		int graficaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int graficaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String grafica = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		
                        Instrucciones.GráficaBarras.generarGráfica(grafica.toString(), tituloGlobal, ejexGlobal, ejeyGlobal, titxGlobal, tityGlobal); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficaB",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // graficaP ::= GPIE PARENTESIS_APERTURA lista_sentenciasP EJECUTAR GPIE FIN_DECLARACION PUNTO_COMA PARENTESIS_CIERRE FIN_DECLARACION PUNTO_COMA 
            {
              Object RESULT =null;
		int graficaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int graficaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String grafica = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		
                        Instrucciones.GráficaPie.generarGráfica(grafica.toString(), labGlobal, valsGlobal, tituloGlobal); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficaP",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // graficaL ::= GLINEAS PARENTESIS_APERTURA lista_sentenciasL EJECUTAR GLINEAS FIN_DECLARACION PUNTO_COMA PARENTESIS_CIERRE FIN_DECLARACION PUNTO_COMA 
            {
              Object RESULT =null;
		int graficaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int graficaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String grafica = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		
                        Instrucciones.GráficaLíneas.generarGráfica(grafica.toString(), tituloGlobal, ejexGlobalL, ejeyGlobalL, titxGlobalL, tityGlobalL); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficaL",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // lista_sentenciasB ::= sentenciaB 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        ArrayList<String> listaSenB = new ArrayList<>();
                        listaSenB.add(val.toString());
                        RESULT = listaSenB;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_sentenciasB",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // lista_sentenciasB ::= lista_sentenciasB sentenciaB 
            {
              Object RESULT =null;
		int listaSenBleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaSenBright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object listaSenB = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        ((ArrayList<String>) listaSenB).add(val.toString());
                        RESULT = listaSenB;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_sentenciasB",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // lista_sentenciasP ::= sentenciaP 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        ArrayList<String> listaSenP = new ArrayList<>();
                        listaSenP.add(val.toString());
                        RESULT = listaSenP;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_sentenciasP",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // lista_sentenciasP ::= lista_sentenciasP sentenciaP 
            {
              Object RESULT =null;
		int listaSenPleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaSenPright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object listaSenP = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        ((ArrayList<String>) listaSenP).add(val.toString());
                        RESULT = listaSenP;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_sentenciasP",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // lista_sentenciasL ::= sentenciaL 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        ArrayList<String> listaSenL = new ArrayList<>();
                        listaSenL.add(val.toString());
                        RESULT = listaSenL;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_sentenciasL",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // lista_sentenciasL ::= lista_sentenciasL sentenciaL 
            {
              Object RESULT =null;
		int listaSenLleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaSenLright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object listaSenL = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        ((ArrayList<String>) listaSenL).add(val.toString());
                        RESULT = listaSenL;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_sentenciasL",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentenciaP ::= titulo 
            {
              Object RESULT =null;
		int titleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int titright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tit = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 tituloGlobal = tit.toString(); RESULT = tituloGlobal; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaP",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentenciaP ::= lab 
            {
              Object RESULT =null;
		int lableft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int labright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lab = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 labGlobal = (ArrayList<String>) lab; RESULT = labGlobal; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaP",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentenciaP ::= vals 
            {
              Object RESULT =null;
		int valsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object vals = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 valsGlobal = (ArrayList<String>) vals; RESULT = valsGlobal; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaP",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sentenciaB ::= titulo 
            {
              Object RESULT =null;
		int titleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int titright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tit = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 tituloGlobal = tit.toString(); RESULT = tituloGlobal; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaB",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentenciaB ::= ejex 
            {
              Object RESULT =null;
		int ejexleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ejexright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ejex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ejexGlobal = (ArrayList<String>) ejex; RESULT = ejexGlobal; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaB",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sentenciaB ::= ejey 
            {
              Object RESULT =null;
		int ejeyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ejeyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ejey = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ejeyGlobal = (ArrayList<String>) ejey; RESULT = ejeyGlobal; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaB",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sentenciaB ::= titx 
            {
              Object RESULT =null;
		int titxleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int titxright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object titx = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 titxGlobal = titx.toString(); RESULT = titxGlobal; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaB",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sentenciaB ::= tity 
            {
              Object RESULT =null;
		int tityleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tityright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tity = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 tityGlobal = tity.toString(); RESULT = tityGlobal; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaB",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sentenciaL ::= titulo 
            {
              Object RESULT =null;
		int titleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int titright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tit = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 tituloGlobal = tit.toString(); RESULT = tituloGlobal; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaL",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sentenciaL ::= ejex 
            {
              Object RESULT =null;
		int ejexleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ejexright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ejex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ejexGlobalL = (ArrayList<String>) ejex; RESULT = ejexGlobalL; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaL",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sentenciaL ::= ejey 
            {
              Object RESULT =null;
		int ejeyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ejeyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ejey = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ejeyGlobalL = (ArrayList<String>) ejey; RESULT = ejeyGlobalL; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaL",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sentenciaL ::= titx 
            {
              Object RESULT =null;
		int titxleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int titxright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object titx = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 titxGlobalL = titx.toString(); RESULT = titxGlobalL; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaL",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sentenciaL ::= tity 
            {
              Object RESULT =null;
		int tityleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tityright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tity = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 tityGlobalL = tity.toString(); RESULT = tityGlobalL; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaL",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // titulo ::= GTITULO DOS_PUNTOS DOS_PUNTOS CHAR IGUAL expresion FIN_DECLARACION PUNTO_COMA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
                        RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("titulo",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ejex ::= X DOS_PUNTOS DOS_PUNTOS CHAR IGUAL CORCHETE_APERTURA lista_expresiones CORCHETE_CIERRE FIN_DECLARACION PUNTO_COMA 
            {
              Object RESULT =null;
		int listaexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int listaexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object listaexp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 
                        RESULT = (ArrayList<String>) listaexp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ejex",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ejex ::= X DOS_PUNTOS DOS_PUNTOS CHAR IGUAL expresion FIN_DECLARACION PUNTO_COMA 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                        RESULT = Instrucciones.Arreglos.obtenerArray(exp.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ejex",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ejey ::= Y DOS_PUNTOS DOS_PUNTOS DOUBLE IGUAL CORCHETE_APERTURA lista_expresiones CORCHETE_CIERRE FIN_DECLARACION PUNTO_COMA 
            {
              Object RESULT =null;
		int listaexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int listaexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object listaexp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 
                        RESULT = (ArrayList<String>) listaexp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ejey",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ejey ::= Y DOS_PUNTOS DOS_PUNTOS DOUBLE IGUAL expresion FIN_DECLARACION PUNTO_COMA 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                        RESULT = Instrucciones.Arreglos.obtenerArray(exp.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ejey",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // titx ::= tX DOS_PUNTOS DOS_PUNTOS CHAR IGUAL expresion FIN_DECLARACION PUNTO_COMA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
                        RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("titx",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // tity ::= tY DOS_PUNTOS DOS_PUNTOS CHAR IGUAL expresion FIN_DECLARACION PUNTO_COMA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
                        RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tity",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // lab ::= LABEL DOS_PUNTOS DOS_PUNTOS CHAR IGUAL CORCHETE_APERTURA lista_expresiones CORCHETE_CIERRE FIN_DECLARACION PUNTO_COMA 
            {
              Object RESULT =null;
		int listaexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int listaexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object listaexp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 
                        RESULT = (ArrayList<String>) listaexp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lab",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // lab ::= LABEL DOS_PUNTOS DOS_PUNTOS CHAR IGUAL expresion FIN_DECLARACION PUNTO_COMA 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                        RESULT = Instrucciones.Arreglos.obtenerArray(exp.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lab",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // vals ::= VALUES DOS_PUNTOS DOS_PUNTOS DOUBLE IGUAL CORCHETE_APERTURA lista_expresiones CORCHETE_CIERRE FIN_DECLARACION PUNTO_COMA 
            {
              Object RESULT =null;
		int listaexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int listaexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object listaexp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 
                        RESULT = (ArrayList<String>) listaexp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vals",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // vals ::= VALUES DOS_PUNTOS DOS_PUNTOS DOUBLE IGUAL expresion FIN_DECLARACION PUNTO_COMA 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                        RESULT = Instrucciones.Arreglos.obtenerArray(exp.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vals",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // print ::= CONSOLE DOS_PUNTOS DOS_PUNTOS IMPRIMIR IGUAL lista_expresiones FIN_DECLARACION PUNTO_COMA 
            {
              Object RESULT =null;
		int listaexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object listaexp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
                        resultado = Instrucciones.Impresión.instrucciónPrint((ArrayList<String>) listaexp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // print_array ::= CONSOLE DOS_PUNTOS DOS_PUNTOS COLUMN IGUAL expresion GUION MAYORQUE expresion FIN_DECLARACION PUNTO_COMA 
            {
              Object RESULT =null;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object titulo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int nombreArrayleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nombreArrayright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object nombreArray = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
                        resultado = Instrucciones.ImpresiónArreglos.imprimirArregloPorNombre(titulo.toString(), nombreArray.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print_array",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // print_array ::= CONSOLE DOS_PUNTOS DOS_PUNTOS COLUMN IGUAL expresion GUION MAYORQUE CORCHETE_APERTURA lista_expresiones CORCHETE_CIERRE FIN_DECLARACION PUNTO_COMA 
            {
              Object RESULT =null;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object titulo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int listaexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int listaexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object listaexp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 
                        resultado = Instrucciones.ImpresiónArreglos.imprimirArreglo(titulo.toString(), (ArrayList<String>) listaexp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print_array",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // operacion_aritmetica ::= operacion PARENTESIS_APERTURA expresion COMA expresion PARENTESIS_CIERRE 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                        RESULT = Instrucciones.Aritméticas.realizarOperación(op.toString(), izq.toString(), der.toString() ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // operacion_estadistica ::= estadística PARENTESIS_APERTURA expresion PARENTESIS_CIERRE 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                        ArrayList<String> valores = Instrucciones.Arreglos.obtenerArray(exp.toString());
                        RESULT = Instrucciones.Estadísticas.realizarOperaciónEstadística(op.toString(), valores);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_estadistica",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // operacion_estadistica ::= estadística PARENTESIS_APERTURA CORCHETE_APERTURA lista_expresiones CORCHETE_CIERRE PARENTESIS_CIERRE 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int listaexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object listaexp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
                        RESULT = Instrucciones.Estadísticas.realizarOperaciónEstadística(op.toString(), (ArrayList<String>) listaexp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_estadistica",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // estadística ::= MEDIA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estadística",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // estadística ::= MEDIANA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estadística",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // estadística ::= MODA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estadística",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // estadística ::= VARIANZA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estadística",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // estadística ::= MAX 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estadística",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // estadística ::= MIN 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estadística",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // variable ::= VAR DOS_PUNTOS tipo DOS_PUNTOS DOS_PUNTOS ID_VAR MENORQUE GUION expresion FIN_DECLARACION PUNTO_COMA 
            {
              Object RESULT =null;
		int tipoVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int tipoVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object tipoVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
                        Instrucciones.Variables.datosReporteVariables(id.toString(), (String) tipoVar, valor.toString());
                        System.out.println("Asignando valor a la variable " + id.toString() + ": " + valor.toString());
                        Instrucciones.Variables.asignarVariable(id.toString(), valor.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // operacion ::= SUMA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // operacion ::= RESTA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // operacion ::= MULTIPLICACION 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // operacion ::= DIVISION 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // operacion ::= MODULO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // array ::= ARRAY DOS_PUNTOS tipo DOS_PUNTOS DOS_PUNTOS ID_ARRAY MENORQUE GUION CORCHETE_APERTURA lista_expresiones CORCHETE_CIERRE FIN_DECLARACION PUNTO_COMA 
            {
              Object RESULT =null;
		int tipoArrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int tipoArrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Object tipoArr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int listaexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int listaexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object listaexp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
                        StringBuilder sb = new StringBuilder();
                        for (String expresion : (ArrayList<String>) listaexp) {
                            sb.append(expresion).append(", "); 
                        }
                        String expresiones = sb.toString();
                        if (expresiones.length() > 2) { 
                            expresiones = expresiones.substring(0, expresiones.length() - 2);
                        }
                        Instrucciones.Arreglos.datosReporteArreglo(id.toString(), (String) tipoArr, (ArrayList<String>) listaexp);
                        System.out.println("Asignando valores a la variable " + id.toString() + ": [" + expresiones + "]");
                        Instrucciones.Arreglos.asignarArray(id.toString(),(ArrayList<String>) listaexp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // tipo ::= DOUBLE 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String tip = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = tip.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // tipo ::= CHAR 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String tip = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = tip.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // lista_expresiones ::= expresion 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        ArrayList<String> listaExp = new ArrayList<>();
                        listaExp.add(val.toString());
                        RESULT = listaExp;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // lista_expresiones ::= lista_expresiones COMA expresion 
            {
              Object RESULT =null;
		int listaExpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaExpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object listaExp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        ((ArrayList<String>) listaExp).add(val.toString());
                        RESULT = listaExp;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expresion ::= ENTERO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expresion ::= DECIMAL 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expresion ::= CADENA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expresion ::= ID_VAR 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Instrucciones.Variables.obtenerVariable(val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expresion ::= operacion_aritmetica 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expresion ::= operacion_estadistica 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expresion ::= ID_ARRAY 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
